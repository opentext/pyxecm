"""
Payload Module to implement functions to process Terrarium payload

This code processes a YAML payload file that includes various settings:
* WebHooks (URLs) to call (e.g. to start-up external services or applications)
* OTDS partitions and OAuth clients
* OTDS trusted sites and system attributes
* OTDS licenses
* Extended ECM users and groups
* Microsoft 365 user, groups, and teams
* Extended ECM Admin Settings (LLConfig)
* Extended ECM External System Connections (SAP, SuccessFactors, ...)
* Extended ECM Transport Packages (scenarios and demo content)
* Extended ECM CS Applications (typically based on Web Reports)
* Extended ECM Web Reports to run
* Extended ECM Workspaces to create (incl. members, workspace relationships)
* Extended ECM user photos, user favorites and user settings
* Extended ECM items to create and permissions to apply
* Extended ECM items to rename
* Extended ECM Documents to generate (from templates)
* Extended ECM assignments (used e.g. for Government scenario)
* Extended ECM Records Management settings, Security Clearance, Supplemental Markings, and Holds
* SAP RFCs (Remote Function Calls)
* Commands to execute in Kubernetes Pods

This code typically runs in a container as part of the cloud automation.

Class: Payload
Methods:

__init__ : class initializer
replace_placeholders: replace placeholder in admin config files
init_payload: load and initialize the YAML payload
get_payload_section: delivers a section of the payload as a list of settings
get_all_group_names: construct a list of all group name

check_status_file: check if the payload section has been processed before
write_status_file: Write a status file into the Admin Personal Workspace in Extended ECM
                   to indicate that the payload section has been deployed successfully
get_status_file: Retrieve the content of the status file

determine_group_id: determine the id of a group - either from payload or from OTCS
determine_user_id: determine the id of a user - either from payload or from OTCS
determine_user_id_m365: determine the id of a M365 user - either from payload or from M365 via Graph API
determine_workspace_id: determine the nodeID of a workspace - either from payload or from OTCS

process_payload: process payload (main method)
process_web_hooks: process list of web hooks
process_partitions: process the OTDS partitions
process_partition_licenses: process the licenses that should be assigned to OTDS partitions
                            (this includes existing partitions)
process_oauth_clients: process the OTDS OAuth clients
process_auth_handlers: process the OTDS auth handlers (some are implicitly generated by external system payload)
process_trusted_sites: process the OTDS trusted sites
process_system_attributes: process the OTDS system attributes
process_group_placeholders: collect group placeholders
process_user_placeholders: collect user placeholders
process_groups: process Extended ECM user groups
process_groups_m365: process M365 user groups
process_users: process Extended ECM users
process_users_m365: process M365 users
process_users_sap: process users that are SAP enabled (if SAP is enabled)
process_teams_m365: process groups in payload and create matching M365 Teams
cleanup_stale_teams_m365: Delete Microsoft Teams that are left-overs from former deployments.
                          This method is currently not used.
cleanup_all_teams_m365: Delete Microsoft Teams that are left-overs from former deployments
process_admin_settings: process Extended ECM administration settings (LLConfig)
process_external_systems: process Extended ECM external systems
process_transport_packages: process Extended ECM transport packages
process_user_photos: process Extended ECM user photos (user profile)
process_user_photos_m365: process user photos in payload and assign them to Microsoft 365 users.
process_workspace_types: process Extended ECM workspace types
                         (needs to run after process_transport_packages)
process_workspaces: process Extended ECM workspace instances
process_workspace_relationships: process Extended ECM workspace relationships
process_workspace_members: process Extended ECM workspace members (users and groups)
process_workspace_aviators: Process workspaces Content Aviator settings in payload and
                            enable Aviator for selected workspaces
process_web_reports: process Extended ECM Web Reports (starts them with parameters)
process_cs_applications: process Extended ECM CS Applications
process_user_settings: Process user settings in payload and apply themin OTDS.
process_user_favorites_and_profiles: Process user favorites in payload and create them in Extended ECM
process_security_clearances: process Security Clearance for users
process_supplemental_markings: process Supplemental Markings for users
process_user_security: process Security Clearance and Supplemental Markings for users
process_records_management_settings: process Records Management settings by applying settings files
process_holds: process Records Management Holds
process_additional_group_members: process additional OTDS group memberships
process_additional_access_role_members: process additional OTDS group memberships
process_renamings: process Extended ECM node renamings
process_items: process Extended ECM items (nodes) to create
process_permissions: process permission changes for alist of Extended ECM items or volumes
process_assignments: process assignments of workspaces / documents to users / groups
process_user_licenses: process and apply licenses to all Extended ECM users (used for OTIV)
process_exec_pod_commands: process Kubernetes pod commands
process_document_generators: Generate documents for a defined workspace type based on template
process_browser_automations: process Selenium-based browser automation payload
init_sap: initalize SAP object for RFC communication
process_sap_rfcs: process SAP Remote Function Calls (RFC) to trigger automation in SAP S/4HANA

get_payload: return the payload data structure
get_users: return list of users
get_groups: return list of groups
get_workspaces: return list of workspaces
get_otcs_frontend: return OTCS object for OTCS frontend
get_otcs_backend: return OTCS object for OTCS backend
get_otds: return OTDS object
get_k8s: return the Kubernetes object

"""

__author__ = "Dr. Marc Diefenbruch"
__copyright__ = "Copyright 2023, OpenText"
__credits__ = ["Kai-Philip Gatzweiler"]
__maintainer__ = "Dr. Marc Diefenbruch"
__email__ = "mdiefenb@opentext.com"

import json
import logging
import os
import random
import re
import string
from typing import Callable
from urllib.parse import urlparse

import base64
import gzip
import yaml
import hcl2.api

# OpenText specific modules:
from pyxecm import OTAC, OTCS, OTDS, OTIV
from pyxecm.customizer.k8s import K8s
from pyxecm.customizer.m365 import M365
from pyxecm.customizer.sap import SAP
from pyxecm.customizer.browser_automation import BrowserAutomation
from pyxecm.helper.web import HTTP

logger = logging.getLogger("pyxecm.customizer.payload")


class Payload:
    """Used to process Terrarium payload."""

    # _debug controls whether or not transport processing is
    # stopped if one transport fails:
    _debug: bool = False
    _otcs: OTCS
    _otcs_backend: OTCS
    _otcs_frontend: OTCS
    _otac: OTAC | None
    _otds: OTDS
    _otiv: OTIV | None
    _k8s: K8s | None
    _web: HTTP | None
    _m365: M365 | None
    _browser_automation: BrowserAutomation | None
    _custom_settings_dir = ""

    # _payload_source (string): This is either path + filename of the yaml payload
    # or an path + filename of the Terraform HCL payload
    _payload_source = ""

    # _payload is a dict of the complete payload file.
    # It is initialized by the init_payload() method:
    _payload = {}

    # _payload_sections is a list of dicts with these keys:
    # - name (string)
    # - enabled (bool)
    # - restart (bool)
    _payload_sections = []

    #
    # Initialize payload section variables. They are all list of dicts:
    #

    # webhooks and webhooks_post: List of webHooks. List items are dicts with these key:
    # - enabled (bool)
    # - description (str)
    # - url (str)
    # - method (str) - either POST, PUT, GET
    # - payload (dict)
    # - headers (dict)
    _webhooks = []
    _webhooks_post = []

    # partitions: list of dicts with these key / value pairs:
    # - enabled (bool)
    # - name (str)
    # - description (str)
    # - synced (bool)
    # - access_role (str)
    # - licenses (list)
    _partitions = []

    # oauth_clients: list of dicts with these key / value pairs:
    # - enabled (bool)
    # - name (str)
    # - description (str)
    # - confidential (bool)
    # - partition (str)
    # - redirect_urls (list)
    # - permission_scopes (list)
    # - default_scopes (list)
    # - allow_impersonation (bool)
    _oauth_clients = []

    # oauth_handlers: list of dicts with these key / value pairs:
    # - enabled (bool)
    # - name (str)
    # - description (str)
    # - scope (str)
    # - type (str) - like SAML, SAP, OAUTH
    # - priority (int)
    # - active_by_default (bool)
    # - auth_principal_attributes (list)
    # - saml_url (str)
    # - otds_sp_endpoint (str)
    # - nameid_format (str)
    _auth_handlers = []

    # trusted_sites: list of dicts with these key / value pairs:
    # - enabled (bool)
    # - url (str)
    _trusted_sites = []

    # system_attributes: list of dicts with these key / value pairs:
    # - enabled (bool)
    # - name (str)
    # - value (str)
    # - description (str)
    _system_attributes = []

    # groups: List of groups. List items are dicts with these key / value pairs:
    # - name (str),
    # - parent_groups (list),
    # - enable_o365 (bool)
    _groups = []

    # users: List of users. List items are dicts with these key / value pairs:
    # - enabled (bool)
    # - name (str) (= login)
    # - password (str)
    # - firstname (str)
    # - lastname (str)
    # - email (str)
    # - base_group (str)
    # - groups (list)
    # - favorites (list of str)
    # - security_clearance (int)
    # - supplemental_markings (list of str)
    # - enable_sap (bool)
    # - enable_o365 (bool)
    # - m365_skus (list of str)
    # - extra_attributes (list of dict)
    _users = []

    _admin_settings = []

    # exec_pod_commands: list of commands to be executed in the pods
    # list elements need to be dicts with pod name, command, etc.
    _exec_pod_commands = []

    # external_systems (list): List of external systems. Each list element is a dict with
    # - enabled (bool)
    # - external_system_type (str)
    # - external_system_name (str)
    # - external_system_number (str)
    # - description (str)
    # - as_url (str)
    # - base_url (str)
    # - client (str)
    # - username (str)
    # - password (str)
    # - certificate_file (str)
    # - certificate_password (str)
    # - destination (str)
    # - archive_logical_name (str)
    # - archive_certificate_file (str)
    _external_systems = []

    # transport_packages (list): List of transport packages systems. Each list element is a
    # dict with "url", "name", and "description" keys.
    _transport_packages = []
    _content_transport_packages = []
    _transport_packages_post = []

    _workspace_types = []
    _workspace_templates = []
    _workspaces = []
    _sap_rfcs = []
    _web_reports = []
    _web_reports_post = []
    _cs_applications = []
    _admin_settings_post = []

    # additional_group_members: List of memberships to establish. Each element
    # is a dict with these keys:
    # - parent_group (string)
    # - user_name (string)
    # - group_name (string)
    _additional_group_members = []

    # additional_access_role_members: List of memberships to establish. Each element
    # is a dict with these keys:
    # - access_role (string)
    # - user_name (string)
    # - group_name (string)
    # - partition_name (string)
    _additional_access_role_members = []
    _renamings = []
    _items = []
    _items_post = []
    _permissions = []
    _permissions_post = []

    # assignments: List of assignments. Each element is a dict with these keys:
    # - subject (string)
    # - instruction (string)
    # - workspace (string)
    # - nickname (string)
    # - groups (list)
    # - users (list)
    _assignments = []
    _workspace_template_registrations = []
    _security_clearances = []
    _supplemental_markings = []
    _records_management_settings = []
    _holds = []
    _doc_generators = []
    _browser_automations = []

    _placeholder_values = {}

    _otcs_restart_callback: Callable
    _log_header_callback: Callable
    _aviator_enabled = False

    def __init__(
        self,
        payload_source: str,
        custom_settings_dir: str,
        k8s_object: K8s | None,
        otds_object: OTDS,
        otac_object: OTAC | None,
        otcs_backend_object: OTCS,
        otcs_frontend_object: OTCS,
        otcs_restart_callback: Callable,
        otiv_object: OTIV | None,
        m365_object: M365 | None,
        browser_automation_object: BrowserAutomation | None,
        placeholder_values: dict,
        log_header_callback: Callable,
        stop_on_error: bool = False,
        aviator_enabled: bool = False,
    ):
        """Initialize the Payload object

        Args:
            payload_source (str): path or URL to payload source file
            k8s_object (object): Kubernetes object
            otds_object (OTDS): OTDS object
            otac_object (OTAC): OTAC object
            otcs_backend_object (OTCS): OTCS backend object
            otcs_frontend_object (OTCS): OTCS frontend object
            otcs_restart_callback (Callable): function to call if OTCS service needs a restart
            otiv_object (object): OTIV object
            m365_object (object): M365 object to talk to Microsoft Graph API
            browser_automation_object (object): BrowserAutomation object to automate things which don't have a REST API
            placeholder_values (dict): dictionary of placeholder values
                                       to be replaced in admin settings
            log_header_callback: prints a section break / header line into the log
            stop_on_error (bool): controls if transport deployment should stop
                                  if one transport fails
            aviator_enabled (bool): whether or not the Content Aviator is enabled
        """

        self._stop_on_error = stop_on_error
        self._payload_source = payload_source
        self._k8s = k8s_object
        self._otds = otds_object
        self._otac = otac_object
        self._otcs = otcs_backend_object
        self._otcs_backend = otcs_backend_object
        self._otcs_frontend = otcs_frontend_object
        self._otiv = otiv_object
        self._m365 = m365_object
        self._browser_automation = browser_automation_object
        self._custom_settings_dir = custom_settings_dir
        self._placeholder_values = placeholder_values
        self._otcs_restart_callback = otcs_restart_callback
        self._log_header_callback = log_header_callback
        self._aviator_enabled = aviator_enabled
        self._http_object = HTTP()

    # end method definition

    def replace_placeholders(self, content: str) -> str:
        """Function to replace placeholders in file content.
           The content of the file is provided via a parameter.
           The replacements are defined in a object variable
           _placeholder_values (type = dictionary)
           The placeholder values are supposed to be surrounded by
           double % signs like %%OTAWP_RESOURCE_ID%%

        Args:
            content (str): file content to replace placeholders in
        Returns:
            str: updated content with all defined replacements
        """
        # https://stackoverflow.com/questions/63502218/replacing-placeholders-in-a-text-file-with-python

        # if no placeholders are defined we can return the
        # initial value:
        if not self._placeholder_values:
            return content

        try:
            # We do a dynamic replacement here. The replacement is calculated
            # by the lambda function that is basically a lookup of the replacement
            # key found in the settings file with the value defined in the list
            # of replacement values in self._placeholder_values
            return re.sub(
                r"%%(\w+?)%%",
                lambda match: self._placeholder_values[match.group(1)],
                content,
            )
        except KeyError as key_error:
            logger.error(
                "Found placeholder in settings file without a defined value; error -> %s",
                str(key_error),
            )
            return content
        except re.error as re_error:
            logger.error("Regex substitution error -> %s", str(re_error))
            return content

        # end method definition

    def init_payload(self) -> dict | None:
        """Read the YAML or Terraform HCL payload file.

        Args:
            None
        Returns:
            dict: payload as a Python dict. Elements are the different payload sections.
                  None in case the file couldn't be found or read.
        """

        if not os.path.exists(self._payload_source):
            logger.error("Cannot access payload file -> %s", self._payload_source)
            return None

        # Is it a YAML file?
        if self._payload_source.endswith(".yaml"):
            logger.info("Open payload from YAML file -> %s", self._payload_source)
            try:
                with open(self._payload_source, "r", encoding="utf-8") as stream:
                    payload_data = stream.read()
                self._payload = yaml.safe_load(payload_data)
            except yaml.YAMLError as exception:
                logger.error(
                    "Error while reading YAML payload file -> %s; error -> %s",
                    self._payload_source,
                    exception,
                )
                self._payload = {}
        # Or is it a Terraform HCL file?
        elif self._payload_source.endswith(".tf"):
            logger.info(
                "Open payload from Terraform HCL file -> %s", self._payload_source
            )
            try:
                with open(self._payload_source, "r", encoding="utf-8") as stream:
                    self._payload = hcl2.api.load(stream)
                # If payload is wrapped into "external_payload" we unwrap it:
                if self._payload.get("external_payload"):
                    self._payload = self._payload["external_payload"]
            except FileNotFoundError as exception:
                logger.error(
                    "Error while reading Terraform HCL payload file -> %s; error -> %s",
                    self._payload_source,
                    exception,
                )
                self._payload = {}

        elif self._payload_source.endswith(".yml.gz.b64"):
            logger.info(
                "Open payload from base64-gz-YAML file -> %s", self._payload_source
            )
            try:
                with open(self._payload_source, "r", encoding="utf-8") as stream:
                    content = base64.b64decode(stream.read())
                    decoded_data = gzip.decompress(content)

                    self._payload = yaml.safe_load(decoded_data)

            except yaml.YAMLError as exception:
                logger.error(
                    "Error while reading YAML payload file -> %s; error -> %s",
                    self._payload_source,
                    exception,
                )
                self._payload = {}

        # If not, it is an unsupported type:
        else:
            logger.error(
                "File -> %s has unsupported file type",
                self._payload_source,
            )
            self._payload = {}

        if self._payload is not None:
            self._payload_sections = self._payload["payloadSections"]

            if not self._payload_sections:
                logger.error(
                    "Sections for payload -> %s are undefined. Skipping...",
                    self._payload_source,
                )
                return None

        # Retrieve all the payload sections and store them in lists:
        self._webhooks = self.get_payload_section("webHooks")
        self._webhooks_post = self.get_payload_section("webHooksPost")
        self._partitions = self.get_payload_section("partitions")
        self._oauth_clients = self.get_payload_section("oauthClients")
        self._auth_handlers = self.get_payload_section("authHandlers")
        self._trusted_sites = self.get_payload_section("trustedSites")
        self._system_attributes = self.get_payload_section("systemAttributes")
        self._groups = self.get_payload_section("groups")
        self._users = self.get_payload_section("users")
        self._admin_settings = self.get_payload_section("adminSettings")
        self._exec_pod_commands = self.get_payload_section("execPodCommands")
        self._external_systems = self.get_payload_section("externalSystems")
        self._transport_packages = self.get_payload_section("transportPackages")
        self._content_transport_packages = self.get_payload_section(
            "contentTransportPackages"
        )
        self._transport_packages_post = self.get_payload_section(
            "transportPackagesPost"
        )
        self._workspace_templates = self.get_payload_section("workspaceTemplates")
        self._workspaces = self.get_payload_section("workspaces")
        self._sap_rfcs = self.get_payload_section("sapRFCs")
        self._web_reports = self.get_payload_section("webReports")
        self._web_reports_post = self.get_payload_section("webReportsPost")
        self._cs_applications = self.get_payload_section("csApplications")
        self._admin_settings_post = self.get_payload_section("adminSettingsPost")
        self._additional_group_members = self.get_payload_section(
            "additionalGroupMemberships"
        )
        self._additional_access_role_members = self.get_payload_section(
            "additionalAccessRoleMemberships"
        )
        self._renamings = self.get_payload_section("renamings")
        self._items = self.get_payload_section("items")
        self._items_post = self.get_payload_section("itemsPost")
        self._permissions = self.get_payload_section("permissions")
        self._permissions_post = self.get_payload_section("permissionsPost")
        self._assignments = self.get_payload_section("assignments")
        self._security_clearances = self.get_payload_section("securityClearances")
        self._supplemental_markings = self.get_payload_section("supplementalMarkings")
        self._records_management_settings = self.get_payload_section(
            "recordsManagementSettings"
        )
        self._holds = self.get_payload_section("holds")
        self._doc_generators = self.get_payload_section("documentGenerators")
        self._browser_automations = self.get_payload_section("browserAutomations")

        return self._payload
        # end method definition

    def get_payload_section(self, payload_section_name: str) -> list:
        """Get a defined section of the payload. The section is delivered as a list of settings.
        It deliveres an empty list if this payload section is disabled by the corresponding
        payload switch (this is read from the payloadSections dictionary of the payload)

        Args:
            payload_section_name (str): name of the dict element in the payload structure
        Returns:
            list: section of the payload as a Python list. Empty list if section does not exist
            or section is disabled by the corresponding payload switch.
        """

        if not isinstance(self._payload, dict):
            return []

        # if the secton is not in the payload we return an empty list:
        if not self._payload.get(payload_section_name):
            return []

        # Check if the payload section is either enabled
        # or the struct for payloadSection enabling is not in the payload:
        sections = self._payload.get("payloadSections")
        if sections:
            section = next(
                (item for item in sections if item["name"] == payload_section_name),
                None,
            )
            if not section or not section["enabled"]:
                return []

        return self._payload[payload_section_name]

        # end method definition

    def get_all_group_names(self) -> list:
        """Construct a list of all group name

        Returns:
            list: list of all group names
        """
        return [group.get("name") for group in self._groups]

        # end method definition

    def check_status_file(
        self, payload_section_name: str, payload_specific: bool = True
    ) -> bool:
        """Check if the payload section has been processed before. This is
           done by checking the existance of a text file in the Admin Personal
           workspace in Extended ECM with the name of the payload section.

        Args:
            payload_section_name (str): name of the payload section. This
                                        is used to construct the file name
            payload_specific (bool): whether or not the success should be specific for
                                     each payload file or if success is "global" - like for the deletion
                                     of the existing M365 teams (which we don't want to execute per
                                     payload file)
        Returns:
            bool: True if the payload has been processed successfully before, False otherwise
        """

        logger.info(
            "Check if payload section -> %s has been processed successfully before...",
            payload_section_name,
        )

        response = self._otcs.get_node_by_volume_and_path(
            142
        )  # write to Personal Workspace of Admin
        target_folder_id = self._otcs.get_result_value(response, "id")
        if not target_folder_id:
            target_folder_id = 2004  # use Personal Workspace of Admin as fallback

        # Some sections are actually not payload specific like teamsM365Cleanup
        # we don't want external payload runs to re-apply this processing:
        if payload_specific:
            file_name = os.path.basename(self._payload_source)  # remove directories
            # Split once at the first occurance of a dot
            # as the _payload_source may have multiple suffixes
            # such as .yml.gz.b64:
            file_name = file_name.split(".", 1)[0]
            file_name = "success_" + file_name + "_" + payload_section_name + ".json"
        else:
            file_name = "success_" + payload_section_name + ".json"

        status_document = self._otcs.get_node_by_parent_and_name(
            parent_id=int(target_folder_id), name=file_name, show_error=False
        )
        if status_document and status_document["results"]:
            name = self._otcs.get_result_value(status_document, "name")
            if name == file_name:
                logger.info(
                    "Payload section -> %s has been processed successfully before. Skipping...",
                    payload_section_name,
                )
                return True
        logger.info(
            "Payload section -> %s has not been processed successfully before. Processing...",
            payload_section_name,
        )
        return False

        # end method definition

    def write_status_file(
        self,
        success: bool,
        payload_section_name: str,
        payload_section: list,
        payload_specific: bool = True,
    ) -> bool:
        """Write a status file into the Admin Personal Workspace in Extended ECM
           to indicate that the payload section has been deployed successfully.
           This speeds up the customizing process in case the customizer pod
           is restarted.

        Args:
            success (bool): True if the section was processed successful, False otherwise.
            payload_section_name (str): name of the payload section
            payload_section (list): payload section content - this is written as JSon into the file
            payload_specific (bool): whether or not the success should be specific for
                                     each payload file or if success is "global" - like for the deletion
                                     of the existing M365 teams (which we don't want to execute per
                                     payload file)
        Returns:
            bool: True if the status file as been upladed to Extended ECM successfully, False otherwise
        """

        if success:
            logger.info(
                "Payload section -> %s has been completed successfully!",
                payload_section_name,
            )
            prefix = "success_"
        else:
            logger.error(
                "Payload section -> %s had failures!",
                payload_section_name,
            )
            prefix = "failure_"

        response = self._otcs.get_node_by_volume_and_path(
            142
        )  # write to Personal Workspace of Admin (with Volume Type ID = 142)
        target_folder_id = self._otcs.get_result_value(response, "id")
        if not target_folder_id:
            target_folder_id = 2004  # use Personal Workspace of Admin as fallback

        # Some sections are actually not payload specific like teamsM365Cleanup
        # and we don't want external payload runs to re-process these:
        if payload_specific:
            file_name = os.path.basename(self._payload_source)  # remove directories
            # Split once at the first occurance of a dot
            # as the _payload_source may have multiple suffixes
            # such as .yml.gz.b64:
            file_name = file_name.split(".", 1)[0]
            file_name = prefix + file_name + "_" + payload_section_name + ".json"
        else:
            file_name = prefix + payload_section_name + ".json"
        full_path = "/tmp/" + file_name

        with open(full_path, mode="w", encoding="utf-8") as localfile:
            localfile.write(json.dumps(payload_section, indent=2))

        # Check if the status file has been uploaded before.
        # This can happen if we re-run the python container.
        # In this case we add a version to the existing document:
        response = self._otcs.get_node_by_parent_and_name(
            parent_id=int(target_folder_id), name=file_name, show_error=False
        )
        target_document_id = self._otcs.get_result_value(response, "id")
        if target_document_id:
            response = self._otcs.add_document_version(
                node_id=int(target_document_id),
                file_url=full_path,
                file_name=file_name,
                mime_type="text/plain",
                description="Updated status file after re-run of customization",
            )
        else:
            response = self._otcs.upload_file_to_parent(
                file_url=full_path,
                file_name=file_name,
                mime_type="text/plain",
                parent_id=int(target_folder_id),
            )

        if response:
            logger.info(
                "Status file -> %s has been written to Personal Workspace of admin user",
                file_name,
            )
            return True

        logger.error(
            "Failed to write status file -> %s to Personal Workspace of admin user",
            file_name,
        )

        return False

        # end method definition

    def get_status_file(
        self, payload_section_name: str, payload_specific: bool = True
    ) -> list | None:
        """Get the status file and read it into a dictionary.

        Args:
            payload_section_name (str): name of the payload section. This
                                        is used to construct the file name
            payload_specific (bool): whether or not the success should be specific for
                                     each payload file or if success is "global" - like for the deletion
                                     of the existing M365 teams (which we don't want to execute per
                                     payload file)
        Returns:
            dict: content of the status file as a dictionary or None in case of an error
        """

        logger.info(
            "Get the status file of the payload section -> %s...",
            payload_section_name,
        )

        response = self._otcs.get_node_by_volume_and_path(
            142
        )  # read from Personal Workspace of Admin
        source_folder_id = self._otcs.get_result_value(response, "id")
        if not source_folder_id:
            source_folder_id = 2004  # use Personal Workspace of Admin as fallback

        # Some sections are actually not payload specific like teamsM365Cleanup
        # we don't want external payload runs to re-apply this processing:
        if payload_specific:
            file_name = os.path.basename(self._payload_source)  # remove directories
            # Split once at the first occurance of a dot
            # as the _payload_source may have multiple suffixes
            # such as .yml.gz.b64:
            file_name = file_name.split(".", 1)[0]
            file_name = "success_" + file_name + "_" + payload_section_name + ".json"
        else:
            file_name = "success_" + payload_section_name + ".json"

        status_document = self._otcs.get_node_by_parent_and_name(
            parent_id=int(source_folder_id), name=file_name, show_error=True
        )
        status_file_id = self._otcs.get_result_value(status_document, "id")
        if not status_file_id:
            logger.error("Cannot find status file -> %s", file_name)
            return None
        content = self._otcs.get_document_content(status_file_id)

        try:
            json_data = json.loads(content.decode("utf-8"))
            if isinstance(json_data, list):
                return json_data
            else:
                logger.error("File content is in JSON format but not a list.")
                return None
        except json.JSONDecodeError as e:
            logger.error("File content is not in valid JSON format; error -> %s", e)
            return None

        # end method definition

    def determine_group_id(self, group: dict) -> int:
        """Determine the id of a group - either from payload or from OTCS.
           If the group is found in OTCS write back the ID into the payload.

        Args:
            group (dict): group payload element

        Returns:
            int: group ID
        Side Effects:
            the group items are modified by adding an "id" dict element that
            includes the technical ID of the group in Extended ECM
        """

        # Is the ID already known in payload? (if determined before)
        if "id" in group:
            return group["id"]

        if not "name" in group:
            logger.error("Group needs a name to lookup the ID.")
            return 0
        group_name = group["name"]

        existing_groups = self._otcs.get_group(name=group_name)
        # We use the lookup method here as get_group() could deliver more
        # then 1 result element (in edge cases):
        group_id = self._otcs.lookup_result_value(
            response=existing_groups, key="name", value=group_name, return_key="id"
        )

        # Have we found an exact match?
        if group_id:
            # Write ID back into the payload:
            group["id"] = group_id
            return group["id"]
        else:
            logger.info("Did not find an existing group with name -> %s", group_name)
            return 0

        # end method definition

    def determine_user_id(self, user: dict) -> int:
        """Determine the id of a user - either from payload or from OTCS
           If the user is found in OTCS write back the ID into the payload.

        Args:
            user (dict): user payload element
        Returns:
            int: user ID
        Side Effects:
            the user items are modified by adding an "id" dict element that
            includes the technical ID of the user in Extended ECM
        """

        # Is the ID already known in payload? (if determined before)
        if "id" in user:
            return user["id"]

        if not "name" in user:
            logger.error("User needs a login name to lookup the ID.")
            return 0
        user_name = user["name"]

        response = self._otcs.get_user(name=user_name)
        # We use the lookup method here as get_user() could deliver more
        # then 1 result element (in edge cases):
        user_id = self._otcs.lookup_result_value(
            response=response, key="name", value=user_name, return_key="id"
        )

        # Have we found an exact match?
        if user_id:
            # Write ID back into the payload
            user["id"] = user_id
            return user["id"]
        else:
            logger.info("Did not find an existing user with name -> %s", user_name)
            return 0

        # end method definition

    def determine_user_id_m365(self, user: dict) -> int:
        """Determine the id of a M365 user - either from payload or from M365 via Graph API
           If the user is found in M365 write back the M365 user ID into the payload.

        Args:
            user (dict): user payload element
        Returns:
            int: M365 user ID or 0 if the user is not found.
        Side Effects:
            the user items are modified by adding an "m365_id" dict element that
            includes the technical ID of the user in Microsoft 365
        """

        # is the payload already updated with the M365 user ID?
        if "m365_id" in user:
            return user["m365_id"]

        if not "name" in user:
            logger.error("User needs a login name to lookup the M365 user ID.")
            return 0
        user_name = user["name"]

        m365_user_name = user_name + "@" + self._m365.config()["domain"]
        existing_user = self._m365.get_user(m365_user_name)
        if existing_user:
            logger.info(
                "Found existing Microsoft 365 user -> %s (%s) with ID -> %s. Update m365_id in payload...",
                existing_user["displayName"],
                existing_user["userPrincipalName"],
                existing_user["id"],
            )
            # write back the M365 user ID into the payload
            user["m365_id"] = existing_user["id"]
            return user["m365_id"]
        else:
            logger.info("Did not find an existing M365 user with name -> %s", user_name)
            return 0

        # end method definition

    def determine_workspace_id(self, workspace: dict) -> int:
        """Determine the nodeID of a workspace - either from payload or from OTCS

        Args:
            workspace (dict): workspace payload element

        Returns:
            int: workspace Node ID
        Side Effects:
            the workspace items are modified by adding an "nodeId" dict element that
            includes the node ID of the workspace in Extended ECM
        """

        if "nodeId" in workspace:
            return workspace["nodeId"]

        response = self._otcs.get_workspace_by_type_and_name(
            type_name=workspace["type_name"], name=workspace["name"]
        )
        workspace_id = self._otcs.get_result_value(response, "id")
        if workspace_id:
            # Write nodeID back into the payload
            workspace["nodeId"] = workspace_id
            return workspace_id
        else:
            logger.info(
                "Workspace of type -> %s and name -> %s does not yet exist.",
                workspace["type_name"],
                workspace["name"],
            )
            return 0

        # end method definition

    def process_payload(self):
        """Main method to process a payload file.

        Args:
            None
        Returns:
            None
        """

        if not self._payload_sections:
            return None

        for payload_section in self._payload_sections:
            match payload_section["name"]:
                case "webHooks":
                    self._log_header_callback("Process Web Hooks")
                    self.process_web_hooks(self._webhooks)
                case "webHooksPost":
                    self._log_header_callback("Process Web Hooks (post)")
                    self.process_web_hooks(self._webhooks_post, "webHooksPost")
                case "partitions":
                    self._log_header_callback("Process OTDS Partitions")
                    self.process_partitions()
                    self._log_header_callback("Assign OTCS Licenses to Partitions")
                    self.process_partition_licenses()
                case "oauthClients":
                    self._log_header_callback("Process OTDS OAuth Clients")
                    self.process_oauth_clients()
                case "authHandlers":
                    self._log_header_callback("Process OTDS Auth Handlers")
                    self.process_auth_handlers()
                case "trustedSites":
                    self._log_header_callback("Process OTDS Trusted Sites")
                    self.process_trusted_sites()
                case "systemAttributes":
                    self._log_header_callback("Process OTDS System Attributes")
                    self.process_system_attributes()
                case "groups":
                    self._log_header_callback("Process OTCS Groups")
                    self.process_groups()
                    # Add all groups with ID the a lookup dict for placeholder replacements
                    # in adminSetting. This also updates the payload with group IDs from OTCS
                    # if the group already exists in Extended ECM. This is important especially
                    # if the customizer pod is restarted / run multiple times:
                    self.process_group_placeholders()
                    if self._m365 and isinstance(self._m365, M365):
                        self._log_header_callback("Cleanup existing MS Teams")
                        self.cleanup_all_teams_m365()
                        self._log_header_callback("Process M365 Groups")
                        self.process_groups_m365()
                case "users":
                    self._log_header_callback("Process OTCS Users")
                    self.process_users()
                    # Add all users with ID the a lookup dict for placeholder replacements
                    # in adminSetting. This also updates the payload with user IDs from OTCS
                    # if the user already exists in Extended ECM. This is important especially
                    # if the cutomizer pod is restarted / run multiple times:
                    self.process_user_placeholders()
                    self._log_header_callback("Assign OTCS Licenses to Users")
                    self.process_user_licenses(
                        resource_name=self._otcs.config()["resource"],
                        license_feature=self._otcs.config()["license"],
                        license_name="EXTENDED_ECM",
                        user_specific_payload_field="licenses",
                    )
                    self._log_header_callback("Assign OTIV Licenses to Users")

                    if (
                        isinstance(self._otiv, OTIV)  # can be None in 24.1 or newer
                        and self._otiv.config()
                        and self._otiv.config()["resource"]
                        and self._otiv.config()["license"]
                    ):
                        self.process_user_licenses(
                            resource_name=self._otiv.config()["resource"],
                            license_feature=self._otiv.config()["license"],
                            license_name="INTELLIGENT_VIEWING",
                            user_specific_payload_field="",
                            section_name="userLicensesViewing",  # we need a specific name here for OTIV
                        )
                    else:
                        logger.info("Processing of OTIV licenses is disabled.")
                    self._log_header_callback("Process User Settings")
                    self.process_user_settings()
                    if self._m365 and isinstance(self._m365, M365):
                        self._log_header_callback("Process M365 Users")
                        self.process_users_m365()
                        # We need to do the MS Teams creation after the creation of
                        # the M365 users as we require Group Owners to create teams
                        self._log_header_callback("Process M365 Teams")
                        self.process_teams_m365()
                case "adminSettings":
                    self._log_header_callback("Process Administration Settings")
                    restart_required = self.process_admin_settings(self._admin_settings)
                    if restart_required:
                        logger.info(
                            "Admin Settings require a restart of OTCS services...",
                        )
                        # Restart OTCS frontend and backend pods:
                        self._otcs_restart_callback(self._otcs_backend)
                case "adminSettingsPost":
                    self._log_header_callback("Process Administration Settings (post)")
                    restart_required = self.process_admin_settings(
                        self._admin_settings_post, "adminSettingsPost"
                    )
                    if restart_required:
                        logger.info(
                            "Admin Settings (Post) require a restart of OTCS services...",
                        )
                        # Restart OTCS frontend and backend pods:
                        self._otcs_restart_callback(self._otcs_backend)
                case "execPodCommands":
                    self._log_header_callback("Process Pod Commands")
                    self.process_exec_pod_commands()
                case "csApplications":
                    self._log_header_callback("Process CS Apps (backend)")
                    self.process_cs_applications(
                        self._otcs_backend, section_name="csApplicationsBackend"
                    )
                    self._log_header_callback("Process CS Apps (frontend)")
                    self.process_cs_applications(
                        self._otcs_frontend, section_name="csApplicationsFrontend"
                    )
                case "externalSystems":
                    self._log_header_callback("Process External System Connections")
                    self.process_external_systems()
                case "transportPackages":
                    self._log_header_callback("Process Transport Packages")
                    self.process_transport_packages(self._transport_packages)
                    # Right after the transport that create the workspace types
                    # we extract them and put them in a generated payload list:
                    self._log_header_callback("Process Workspace Types")
                    self.process_workspace_types()
                    if self._m365 and isinstance(self._m365, M365):
                        # Right after the transport that creates the top level folders
                        # we can add the M365 Teams apps for Extended ECM as its own tab:
                        self._log_header_callback("Process M365 Teams apps")
                        self.process_teams_m365_apps()
                case "contentTransportPackages":
                    self._log_header_callback("Process Content Transport Packages")
                    self.process_transport_packages(
                        self._content_transport_packages, "contentTransportPackages"
                    )
                case "transportPackagesPost":
                    self._log_header_callback("Process Transport Packages (post)")
                    self.process_transport_packages(
                        self._transport_packages_post, "transportPackagesPost"
                    )
                case "workspaceTemplates":
                    self._log_header_callback(
                        "Process Workspace Templates (Template Role Assignments)"
                    )
                    self.process_workspace_templates()
                case "workspaces":
                    self._log_header_callback("Process Workspaces")
                    self.process_workspaces()
                    self._log_header_callback("Process Workspace Relationships")
                    self.process_workspace_relationships()
                    self._log_header_callback("Process Workspace Memberships")
                    self.process_workspace_members()

                    # This has to run after the processing of webReports that are
                    # used to enable Content Aviator in KINI database table:
                    if self._aviator_enabled:
                        self._log_header_callback("Process Workspace Aviators")
                        self.process_workspace_aviators()
                case "sapRFCs":
                    self._log_header_callback("Process SAP RFCs")

                    sap_external_system = {}
                    if self._external_systems:
                        sap_external_system = next(
                            (
                                item
                                for item in self._external_systems
                                if item.get("external_system_type")
                                and item["external_system_type"] == "SAP"
                            ),
                            {},
                        )
                    if not sap_external_system:
                        logger.warning(
                            "SAP RFC in payload but SAP external system is configured. RFCs will not be processed."
                        )
                    elif not sap_external_system.get("enabled"):
                        logger.warning(
                            "SAP RFC in payload but SAP external system is disabled. RFCs will not be processed."
                        )
                    # if the external system is not marked reachable we check it once more as this could be fooled
                    # by customizer pod restarts
                    elif not sap_external_system.get(
                        "reachable"
                    ) and not self.check_external_system(sap_external_system):
                        logger.warning(
                            "SAP RFC in payload but SAP external system is not reachable. RFCs will not be processed."
                        )
                    else:
                        sap = self.init_sap(sap_external_system)
                        if sap:
                            self.process_sap_rfcs(sap)
                            self._log_header_callback("Process SAP Users")
                            self.process_users_sap(sap)
                case "webReports":
                    self._log_header_callback("Process Web Reports")
                    self.process_web_reports(self._web_reports)
                case "webReportsPost":
                    self._log_header_callback("Process Web Reports (post)")
                    self.process_web_reports(self._web_reports_post, "webReportsPost")
                case "additionalGroupMemberships":
                    self._log_header_callback(
                        "Process additional group members for OTDS"
                    )
                    self.process_additional_group_members()
                case "additionalAccessRoleMemberships":
                    self._log_header_callback(
                        "Process additional access role members for OTDS"
                    )
                    self.process_additional_access_role_members()
                case "renamings":
                    self._log_header_callback("Process Node Renamings")
                    self.process_renamings()
                case "items":
                    self._log_header_callback("Process Items")
                    self.process_items(self._items)
                case "itemsPost":
                    self._log_header_callback("Process Items (post)")
                    self.process_items(self._items_post, "itemsPost")
                case "permissions":
                    self._log_header_callback("Process Permissions")
                    self.process_permissions(self._permissions)
                case "permissionsPost":
                    self._log_header_callback("Process Permissions (post)")
                    self.process_permissions(self._permissions_post, "permissionsPost")
                case "assignments":
                    self._log_header_callback("Process Assignments")
                    self.process_assignments()
                case "securityClearances":
                    self._log_header_callback("Process Security Clearances")
                    self.process_security_clearances()
                case "supplementalMarkings":
                    self._log_header_callback("Process Supplemental Markings")
                    self.process_supplemental_markings()
                case "recordsManagementSettings":
                    self._log_header_callback("Process Records Management Settings")
                    self.process_records_management_settings()
                case "holds":
                    self._log_header_callback("Process Records Management Holds")
                    self.process_holds()
                case "documentGenerators":
                    self._log_header_callback("Process Document Generators")
                    self.process_document_generators()
                case "browserAutomations":
                    self._log_header_callback("Process Browser Automations")
                    self.process_browser_automations()
                case _:
                    logger.error(
                        "Illegal payload section name -> %s in payloadSections!",
                        payload_section["name"],
                    )
            payload_section_restart = payload_section.get("restart", False)
            if payload_section_restart:
                logger.info(
                    "Payload section -> %s requests a restart of OTCS services...",
                    payload_section["name"],
                )
                # Restart OTCS frontend and backend pods:
                self._otcs_restart_callback(self._otcs_backend)
            else:
                logger.info(
                    "Payload section -> %s does not require a restart of OTCS services",
                    payload_section["name"],
                )

        if self._users:
            self._log_header_callback("Process User Profile Photos")
            self.process_user_photos()
            if self._m365 and isinstance(self._m365, M365):
                self._log_header_callback("Process M365 User Profile Photos")
                self.process_user_photos_m365()
            self._log_header_callback("Process User Favorites and Profiles")
            self.process_user_favorites_and_profiles()
            self._log_header_callback("Process User Security")
            self.process_user_security()

        # end method definition

    def process_web_hooks(self, webhooks: list, section_name: str = "webHooks") -> bool:
        """Process Web Hooks in payload and do HTTP requests.

        Args:
            webhooks (list): list of web hook payload settings
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not webhooks:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:

        # WE LET THIS RUN EACH TIME!
        #        if self.check_status_file(section_name):
        #            return True

        success: bool = True

        for webhook in webhooks:
            url = webhook.get("url")
            if not url:
                logger.info("Web Hook does not have a url. Skipping...")
                success = False
                continue

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in webhook and not webhook["enabled"]:
                logger.info("Payload for Web Hook -> %s is disabled. Skipping...", url)
                continue

            description = webhook.get("description")

            method = webhook.get("method", "POST")

            payload = webhook.get("payload", {})

            headers = webhook.get("headers", {})

            if description:
                logger.info("Calling Web Hook -> %s: %s (%s)", method, url, description)
            else:
                logger.info("Calling Web Hook -> %s: %s", method, url)

            response = self._http_object.http_request(url, method, payload, headers)
            if not response or not response.ok:
                success = False

        self.write_status_file(success, section_name, webhooks)

        return success

        # end method definition

    def process_partitions(self, section_name: str = "partitions") -> bool:
        """Process OTDS partitions in payload and create them in OTDS.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections). This
                                          name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._partitions:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for partition in self._partitions:
            partition_name = partition.get("name")
            if not partition_name:
                logger.error("Partition does not have a name. Skipping...")
                success = False
                continue

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in partition and not partition["enabled"]:
                logger.info(
                    "Payload for Partition -> %s is disabled. Skipping...",
                    partition_name,
                )
                continue

            partition_description = partition.get("description")

            # Check if Partition does already exist
            # (in an attempt to make the code idem-potent)
            logger.info(
                "Check if OTDS partition -> %s does already exist...", partition_name
            )
            response = self._otds.get_partition(partition_name, show_error=False)
            if response:
                logger.info(
                    "Partition -> %s does already exist. Skipping...", partition_name
                )
                continue

            # Only continue if Partition does not exist already
            logger.info("Partition -> %s does not exist. Creating...", partition_name)

            response = self._otds.add_partition(partition_name, partition_description)
            if response:
                logger.info("Added OTDS partition -> %s", partition_name)
            else:
                logger.error("Failed to add OTDS partition -> %s", partition_name)
                success = False
                continue

            access_role = partition.get("access_role")
            if access_role:
                response = self._otds.add_partition_to_access_role(
                    access_role, partition_name
                )
                if response:
                    logger.info(
                        "Added OTDS partition -> %s to access role -> %s",
                        partition_name,
                        access_role,
                    )
                else:
                    logger.error(
                        "Failed to add OTDS partition -> %s to access role -> %s",
                        partition_name,
                        access_role,
                    )
                    success = False
                    continue

            # Partions may have an optional list of licenses in
            # the payload. Assign the partition to all these licenses:
            partition_specific_licenses = partition.get("licenses")
            if partition_specific_licenses:
                # We assume these licenses are Extended ECM licenses!
                otcs_resource_name = self._otcs.config()["resource"]
                otcs_resource = self._otds.get_resource(otcs_resource_name)
                if not otcs_resource:
                    logger.error("Cannot find OTCS resource -> %s", otcs_resource_name)
                    success = False
                    continue
                otcs_resource_id = otcs_resource["resourceID"]
                license_name = "EXTENDED_ECM"
                for license_feature in partition_specific_licenses:
                    assigned_license = self._otds.assign_partition_to_license(
                        partition_name,
                        otcs_resource_id,
                        license_feature,
                        license_name,
                    )

                    if not assigned_license:
                        logger.error(
                            "Failed to assign partition -> %s to license feature -> %s of license -> %s!",
                            partition_name,
                            license_feature,
                            license_name,
                        )
                        success = False
                    else:
                        logger.info(
                            "Successfully assigned partition -> %s to license feature -> %s of license -> %s",
                            partition_name,
                            license_feature,
                            license_name,
                        )

        self.write_status_file(success, section_name, self._partitions)

        return success

        # end method definition

    def process_partition_licenses(
        self, section_name: str = "partitionLicenses"
    ) -> bool:
        """Process the licenses that should be assigned to OTDS partitions
           (this includes existing partitions).

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._partitions:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for partition in self._partitions:
            partition_name = partition.get("name")
            if not partition_name:
                logger.error("Partition does not have a name. Skipping...")
                success = False
                continue

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in partition and not partition["enabled"]:
                logger.info(
                    "Payload for Partition -> %s is disabled. Skipping...",
                    partition_name,
                )
                continue

            response = self._otds.get_partition(partition_name, show_error=True)
            if not response:
                logger.error(
                    "Partition -> %s does not exist. Skipping...", partition_name
                )
                success = False
                continue

            # Partions may have an optional list of licenses in
            # the payload. Assign the partition to all these licenses:
            partition_specific_licenses = partition.get("licenses")
            if partition_specific_licenses:
                # We assume these licenses are Extended ECM licenses!
                otcs_resource_name = self._otcs.config()["resource"]
                otcs_resource = self._otds.get_resource(otcs_resource_name)
                if not otcs_resource:
                    logger.error("Cannot find OTCS resource -> %s", otcs_resource_name)
                    success = False
                    continue
                otcs_resource_id = otcs_resource["resourceID"]
                license_name = "EXTENDED_ECM"
                for license_feature in partition_specific_licenses:
                    if self._otds.is_partition_licensed(
                        partition_name=partition_name,
                        resource_id=otcs_resource_id,
                        license_feature=license_feature,
                        license_name=license_name,
                    ):
                        logger.info(
                            "Partition -> %s is already licensed for -> %s (%s)",
                            partition_name,
                            license_name,
                            license_feature,
                        )
                        continue
                    assigned_license = self._otds.assign_partition_to_license(
                        partition_name,
                        otcs_resource_id,
                        license_feature,
                        license_name,
                    )

                    if not assigned_license:
                        logger.error(
                            "Failed to assign partition -> %s to license feature -> %s of license -> %s!",
                            partition_name,
                            license_feature,
                            license_name,
                        )
                        success = False
                    else:
                        logger.info(
                            "Successfully assigned partition -> %s to license feature -> %s of license -> %s",
                            partition_name,
                            license_feature,
                            license_name,
                        )

        self.write_status_file(success, section_name, self._partitions)

        return success

        # end method definition

    def process_oauth_clients(self, section_name: str = "oauthClients") -> bool:
        """Process OTDS OAuth clients in payload and create them in OTDS.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._oauth_clients:
            logger.info("Payload section -> % is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for oauth_client in self._oauth_clients:
            client_name = oauth_client.get("name")
            if not client_name:
                logger.error("OAuth client does not have a name. Skipping...")
                success = False
                continue

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in oauth_client and not oauth_client["enabled"]:
                logger.info(
                    "Payload for OAuthClient -> %s is disabled. Skipping...",
                    client_name,
                )
                continue

            client_description = oauth_client.get("description")
            client_confidential = oauth_client.get("confidential")
            client_partition = oauth_client.get("partition")
            if client_partition == "Global":
                client_partition = []
            client_redirect_urls = oauth_client.get("redirect_urls")
            client_permission_scopes = oauth_client.get("permission_scopes")
            client_default_scopes = oauth_client.get("default_scopes")
            client_allow_impersonation = oauth_client.get("allow_impersonation")
            client_secret = oauth_client.get("secret", "")

            # Check if OAuth client does already exist
            # (in an attempt to make the code idem-potent)
            logger.info(
                "Check if OTDS OAuth Client -> %s does already exist...", client_name
            )
            response = self._otds.get_oauth_client(client_name, show_error=False)
            if response:
                logger.info(
                    "OAuth Client -> %s does already exist. Skipping...", client_name
                )
                continue
            else:
                logger.info(
                    "OAuth Client -> %s does not exist. Creating...", client_name
                )

            response = self._otds.add_oauth_client(
                client_id=client_name,
                description=client_description,
                redirect_urls=client_redirect_urls,
                allow_impersonation=client_allow_impersonation,
                confidential=client_confidential,
                auth_scopes=client_partition,
                allowed_scopes=client_permission_scopes,
                default_scopes=client_default_scopes,
                secret=client_secret,
            )
            if response:
                logger.info("Added OTDS OAuth client -> %s", client_name)
            else:
                logger.error("Failed to add OTDS OAuth client -> %s", client_name)
                success = False
                continue

            # in case the secret has not been provided in the payload we retrieve
            # the automatically created secret:
            client_secret = response.get("secret")
            if not client_secret:
                logger.error("OAuth client -> %s does not have a secret!", client_name)
                continue

            client_description += " Client Secret: " + str(client_secret)
            response = self._otds.update_oauth_client(
                client_name, {"description": client_description}
            )
            # Write the secret back into the payload
            oauth_client["secret"] = client_secret

        self.write_status_file(success, section_name, self._oauth_clients)

        return success

    #        self._otds.add_oauth_clients_to_access_role()

    # end method definition

    def process_auth_handlers(self, section_name: str = "authHandlers") -> bool:
        """Process OTDS authorization handlers in payload and create them in OTDS.
           An authorization handler defined the connection to an Identity Provider (IdP).

            The payload section is a list of dicts with these items:
            {
                enabled: True or False to enable or disable the payload item
                name: Name of the authorization handler. This is shown in the first
                      column of the Auth Handler list in OTDS.
                description: Description of the handler. This is shown in the second
                             column of the Auth Handler
                type: type of the handler. Possible values are SALM, SAP, OAUTH
                priority: a numeric value to order different handlers in OTDS by priority
                active_by_default: Whether to activate this handler for any request to the
                                   OTDS login page. If True, any login request to the OTDS
                                   login page will be redirected to the IdP. If false, the
                                   user has to select the provider on the login page.
                provider_name: The name of the identity provider. This should be a single word
                               since it will be part of the metadata URL. This is what is
                               shown as a button on the OTDS login page.
                auth_principal_attributes: Authentication principal attributes (list)
                nameid_format: Specifies which NameID format supported by the identity provider
                               contains the desired user identifier. The value in this identifier
                               must correspond to the value of the user attribute specified for the
                               authentication principal attribute.
                saml_url: Required for SAML Authentication Handler. The URL for the IdP's federation metadata.
                otds_sp_endpoint: Used for SAML Authentication Handler. Specifies the service provider URL that will
                                  be used to identify OTDS to the identity provider.
                certificate_file: Required for SAP Authentication Handler (SAPSSOEXT).
                                  Fully qualified file name (with path) to the certificate file (URI)
                certificate_password: Required for SAP Authentication Handler (SAPSSOEXT).
                                      Password of the certificate file.
                client_id: Client ID. Required for OAUTH authentication handler.
                client_secret: Client Secret. Required for OAUTH authentication handler.
                authorization_endpoint: Required for OAUTH authentication handler.
                                        The URL to redirect the browser to for authentication.
                                        It is used to retrieve the authorization code or an OIDC id_token.
                token_endpoint: Used for OAUTH authentication handler. The URL from which to retrieve the access token.
                                Not strictly required with OpenID Connect if using the implicit flow.
                scope_string: Used for OAUTH authentication handler. Space delimited scope values to send.
                              Include 'openid' to use OpenID Connect.
            }

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._auth_handlers:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for auth_handler in self._auth_handlers:
            handler_name = auth_handler.get("name")

            if not handler_name:
                logger.error("Auth handler does not have a name. Skipping...")
                success = False
                continue

            # Check if Auth Handler does already exist (e.g. after a restart of
            # the customizer pod):
            if self._otds.get_auth_handler(handler_name, show_error=False):
                logger.info("Auth handler -> %s does already exist. Skipping...")
                continue

            handler_description = auth_handler.get("description")

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in auth_handler and not auth_handler["enabled"]:
                logger.info(
                    "Payload for OTDS Authorization Handler -> %s is disabled. Skipping...",
                    handler_name,
                )
                continue

            handler_scope = auth_handler.get("scope")
            if not handler_scope:
                # Make sure to pass None also if scope is empty string
                handler_scope = None

            handler_type = auth_handler.get("type")
            if not handler_type:
                logger.error(
                    "OTDS Authorization handler does not have a type. Skipping..."
                )
                success = False
                continue

            priority = auth_handler.get("priority")
            active_by_default = auth_handler.get("active_by_default")
            if not active_by_default:
                active_by_default = False

            match handler_type:
                case "SAML":
                    provider_name = auth_handler.get("provider_name")
                    if not provider_name:
                        logger.error(
                            "SAML Authorization handler needs a provider. Skipping..."
                        )
                        success = False
                        continue
                    saml_url = auth_handler.get("saml_url")
                    if not saml_url:
                        logger.error(
                            "SAML Authorization handler needs a SAML URL. Skipping..."
                        )
                        success = False
                        continue
                    otds_sp_endpoint = auth_handler.get("otds_sp_endpoint")
                    if not otds_sp_endpoint:
                        logger.error(
                            "SAML Authorization handler needs a OTDS SP Endpoint. Skipping..."
                        )
                        success = False
                        continue
                    auth_principal_attributes = auth_handler.get(
                        "auth_principal_attributes"
                    )
                    nameid_format = auth_handler.get("nameid_format")
                    response = self._otds.add_auth_handler_saml(
                        name=handler_name,
                        description=handler_description,
                        scope=handler_scope,
                        provider_name=provider_name,
                        saml_url=saml_url,
                        otds_sp_endpoint=otds_sp_endpoint,
                        priority=priority,
                        active_by_default=active_by_default,
                        auth_principal_attributes=auth_principal_attributes,
                        nameid_format=nameid_format,
                    )
                case "SAP":
                    certificate_file = auth_handler.get("certificate_file")
                    if not certificate_file:
                        logger.error(
                            "SAP Authorization handler -> %s (%s) requires a certificate file name. Skipping...",
                            handler_name,
                            handler_type,
                        )
                        success = False
                        continue
                    certificate_password = auth_handler.get("certificate_password")
                    if not certificate_password:
                        # This is not an error - we canhave this key with empty string!
                        logger.info(
                            "SAP Authorization handler -> %s (%s) does not have a certificate password - this can be OK.",
                            handler_name,
                            handler_type,
                        )
                    response = self._otds.add_auth_handler_sap(
                        name=handler_name,
                        description=handler_description,
                        scope=handler_scope,
                        certificate_file=certificate_file,
                        certificate_password=certificate_password,
                        priority=priority,
                    )
                case "OAUTH":
                    provider_name = auth_handler.get("provider_name")
                    if not provider_name:
                        logger.error(
                            "OAUTH Authorization handler -> %s (%s) requires a provider name. Skipping...",
                            handler_name,
                            handler_type,
                        )
                        success = False
                        continue
                    client_id = auth_handler.get("client_id")
                    if not client_id:
                        logger.error(
                            "OAUTH Authorization handler -> %s (%s) requires a client ID. Skipping...",
                            handler_name,
                            handler_type,
                        )
                        success = False
                        continue
                    client_secret = auth_handler.get("client_secret")
                    if not client_secret:
                        logger.error(
                            "OAUTH Authorization handler -> %s (%s) requires a client secret. Skipping...",
                            handler_name,
                            handler_type,
                        )
                        success = False
                        continue
                    authorization_endpoint = auth_handler.get("authorization_endpoint")
                    if not authorization_endpoint:
                        logger.error(
                            "OAUTH Authorization handler -> %s (%s) requires a authorization endpoint. Skipping...",
                            handler_name,
                            handler_type,
                        )
                        success = False
                        continue
                    token_endpoint = auth_handler.get("token_endpoint")
                    if not token_endpoint:
                        logger.warning(
                            "OAUTH Authorization handler -> %s (%s) does not have a token endpoint.",
                            handler_name,
                            handler_type,
                        )
                    scope_string = auth_handler.get("scope_string")
                    response = self._otds.add_auth_handler_oauth(
                        name=handler_name,
                        description=handler_description,
                        scope=handler_scope,
                        provider_name=provider_name,
                        client_id=client_id,
                        client_secret=client_secret,
                        priority=priority,
                        active_by_default=active_by_default,
                        authorization_endpoint=authorization_endpoint,
                        token_endpoint=token_endpoint,
                        scope_string=scope_string,
                    )
                case _:
                    logger.error(
                        "Unsupported authorization handler type -> %s", handler_type
                    )
                    return False

            if response:
                logger.info(
                    "Successfully added OTDS authorization handler -> %s (%s)",
                    handler_name,
                    handler_type,
                )
            else:
                logger.error(
                    "Failed to add OTDS authorization handler -> %s (%s)",
                    handler_name,
                    handler_type,
                )
                success = False

        self.write_status_file(success, section_name, self._auth_handlers)

        return success

        # end method definition

    def process_trusted_sites(self, section_name: str = "trustedSites") -> bool:
        """Process OTDS trusted sites in payload and create them in OTDS.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._trusted_sites:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for trusted_site in self._trusted_sites:
            # old payload may still have trusted sites as list of string
            # we changed also the trusted sites to dict with 23.3
            # We want to be backwards compatible so we handle both cases:
            if isinstance(trusted_site, dict):
                url = trusted_site.get("url")
            elif isinstance(trusted_site, str):
                url = trusted_site
            if not url:
                logger.error("OTDS Trusted site does not have a URL. Skipping...")
                success = False
                continue

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if (
                isinstance(trusted_site, dict)
                and "enabled" in trusted_site
                and not trusted_site["enabled"]
            ):
                logger.info(
                    "Payload for OTDS Trusted Site -> %s is disabled. Skipping...",
                    url,
                )
                continue

            response = self._otds.add_trusted_site(url)
            if response:
                logger.info("Added OTDS trusted site -> %s", trusted_site)
            else:
                logger.error("Failed to add trusted site -> %s", trusted_site)
                success = False

        self.write_status_file(success, section_name, self._trusted_sites)

        return success

        # end method definition

    def process_system_attributes(self, section_name: str = "systemAttributes") -> bool:
        """Process OTDS system attributes in payload and create them in OTDS.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._system_attributes:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for system_attribute in self._system_attributes:
            # Check if there's a matching formal parameter defined on the Web Report node:
            if not system_attribute.get("name"):
                logger.error("OTDS System Attribute needs a name. Skipping...")
                success = False
                continue
            attribute_name = system_attribute["name"]

            if "enabled" in system_attribute and not system_attribute["enabled"]:
                logger.info(
                    "Payload for OTDS System Attribute -> %s is disabled. Skipping...",
                    attribute_name,
                )
                continue

            if not system_attribute.get("value"):
                logger.error("OTDS System Attribute needs a value. Skipping...")
                continue

            attribute_value = system_attribute["value"]
            attribute_description = system_attribute.get("description")
            response = self._otds.add_system_attribute(
                attribute_name, attribute_value, attribute_description
            )
            if response:
                logger.info(
                    "Added OTDS system attribute -> %s with value -> %s",
                    attribute_name,
                    attribute_value,
                )
            else:
                logger.error(
                    "Failed to add OTDS system attribute -> %s with value -> %s",
                    attribute_name,
                    attribute_value,
                )
                success = False

        self.write_status_file(success, section_name, self._system_attributes)

        return success

        # end method definition

    def process_group_placeholders(self):
        """For some adminSettings we may need to replace a placeholder (sourrounded by %%...%%)
        with the actual ID of the Extended ECM group. For this we prepare a lookup dict.
        The dict self._placeholder_values already includes lookups for the OTCS and OTAWP
        OTDS resource IDs (see main.py)
        """

        for group in self._groups:
            if not "name" in group:
                logger.error(
                    "Group needs a name for placeholder definition. Skipping..."
                )
                continue
            group_name = group["name"]
            # Check if group has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in group and not group["enabled"]:
                logger.info(
                    "Payload for Group -> %s is disabled. Skipping...", group_name
                )
                continue

            # Now we determine the ID. Either it is in the payload section from
            # the current customizer run or we try to look it up in the system.
            # The latter case may happen if the customizer pod got restarted.
            group_id = self.determine_group_id(group)
            if not group_id:
                logger.warning(
                    "Group needs an ID for placeholder definition. Skipping..."
                )
                continue

            # Add Group with its ID to the dict self._placeholder_values:
            self._placeholder_values[
                "OTCS_GROUP_ID_"
                + group_name.upper().replace(" & ", "_").replace(" ", "_")
            ] = str(group_id)

        logger.debug(
            "Placeholder values after group processing = %s", self._placeholder_values
        )

        # end method definition

    def process_user_placeholders(self):
        """For some adminSettings we may need to replace a placeholder (sourrounded by %%...%%)
        with the actual ID of the Extended ECM user. For this we prepare a lookup dict.
        The dict self._placeholder_values already includes lookups for the OTCS and OTAWP
        OTDS resource IDs (see customizer.py)
        """

        for user in self._users:
            if not "name" in user:
                logger.error(
                    "User needs a name for placeholder definition. Skipping..."
                )
                continue
            user_name = user["name"]
            # Check if user has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue

            # Now we determine the ID. Either it is in the payload section from
            # the current customizer run or we try to look it up in the system.
            # The latter case may happen if the customizer pod got restarted.
            user_id = self.determine_user_id(user)
            if not user_id:
                logger.warning(
                    "User needs an ID for placeholder definition. Skipping..."
                )
                continue

            # Add user with its ID to the dict self._placeholder_values:
            self._placeholder_values["OTCS_USER_ID_%s", user_name.upper()] = str(
                user_id
            )

        logger.debug(
            "Placeholder values after user processing = %s", self._placeholder_values
        )

        # end method definition

    def process_groups(self, section_name: str = "groups") -> bool:
        """Process groups in payload and create them in Extended ECM.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        Side Effects:
            the group items are modified by adding an "id" dict element that
            includes the technical ID of the group in Extended ECM
        """

        if not self._groups:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # First run through groups: create all groups in payload
        # and store the IDs of the created groups:
        for group in self._groups:
            if not "name" in group:
                logger.error("Group needs a name. Skipping...")
                success = False
                continue
            group_name = group["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in group and not group["enabled"]:
                logger.info(
                    "Payload for Group -> %s is disabled. Skipping...", group_name
                )
                continue

            # Check if the group does already exist (e.g. if job is restarted)
            # as this is a pattern search it could return multiple groups:
            group_id = self.determine_group_id(group)
            if group_id:
                logger.info(
                    "Found existing group -> %s (%s). Skipping to next group...",
                    group_name,
                    group_id,
                )
                continue

            logger.info("Did not find an existing group - creating a new group...")

            # Now we know it is a new group...
            new_group = self._otcs.add_group(group_name)
            if new_group:
                new_group_id = self._otcs.get_result_value(new_group, "id")
                logger.debug("New group -> %s", new_group)
                group["id"] = new_group_id
            else:
                logger.error("Failed to create group -> %s", group_name)
                success = False
                continue

        logger.debug("Groups = %s", self._groups)

        # Second run through groups: create all group memberships
        # (nested groups) based on the IDs created in first run:
        for group in self._groups:
            if not "id" in group:
                logger.error("Group -> %s does not have an ID.", group["name"])
                success = False
                continue
            parent_group_names = group["parent_groups"]
            for parent_group_name in parent_group_names:
                # First, try to find parent group in payload by parent group name:
                parent_group = next(
                    (
                        item
                        for item in self._groups
                        if item["name"] == parent_group_name
                    ),
                    None,
                )
                if parent_group is None:
                    # If this didn't work, try to get the parent group from OTCS. This covers
                    # cases where the parent group is system generated or part
                    # of a former payload processing run:
                    parent_group = self._otcs.get_group(parent_group_name)
                    parent_group_id = self._otcs.get_result_value(parent_group, "id")
                    if not parent_group_id:
                        logger.error(
                            "Parent Group -> %s not found. Skipping...",
                            parent_group_name,
                        )
                        success = False
                        continue
                elif not "id" in parent_group:
                    logger.error(
                        "Parent Group -> %s does not have an ID. Cannot establish group nesting. Skipping...",
                        parent_group["name"],
                    )
                    success = False
                    continue
                else:  # we can read the ID from the
                    parent_group_id = parent_group["id"]

                # retrieve all members of the parent group (1 = get only groups)
                # to check if the current group is already a member in the parent group:
                members = self._otcs.get_group_members(parent_group_id, 1)
                if self._otcs.exist_result_item(members, "id", group["id"]):
                    logger.info(
                        "Group -> %s (%s) is already a member of parent group -> %s (%s). Skipping to next parent group...",
                        group["name"],
                        group["id"],
                        parent_group_name,
                        parent_group_id,
                    )
                else:
                    logger.info(
                        "Add group -> %s (%s) to parent group -> %s (%s)",
                        group["name"],
                        group["id"],
                        parent_group_name,
                        parent_group_id,
                    )
                    self._otcs.add_group_member(group["id"], parent_group_id)

        self.write_status_file(success, section_name, self._groups)

        return success

        # end method definition

    def process_groups_m365(self, section_name: str = "groupsM365") -> bool:
        """Process groups in payload and create them in Microsoft 365.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """
        if not isinstance(self._m365, M365):
            logger.error(
                "Office 365 connection not setup properly. Skipping payload section %s...",
                section_name,
            )
            return False

        if not self._groups:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # First run through groups: create all groups in payload
        # and store the IDs of the created groups:
        for group in self._groups:
            if not "name" in group:
                logger.error("Group needs a name. Skipping...")
                success = False
                continue
            group_name = group["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in group and not group["enabled"]:
                logger.info(
                    "Payload for Group -> %s is disabled. Skipping...", group_name
                )
                continue
            if not "enable_o365" in group or not group["enable_o365"]:
                logger.info(
                    "Office 365 is not enabled in payload for Group -> %s. Skipping...",
                    group_name,
                )
                continue

            # Check if the group does already exist (e.g. if job is restarted)
            # as this is a pattern search it could return multiple groups:
            existing_groups = self._m365.get_group(group_name)

            if existing_groups and existing_groups["value"]:
                logger.debug(
                    "Found existing Microsoft 365 groups -> %s",
                    existing_groups["value"],
                )
                # Get list of all matching groups:
                existing_groups_list = existing_groups["value"]
                # Find the group with the exact match of the name:
                existing_group = next(
                    (
                        item
                        for item in existing_groups_list
                        if item["displayName"] == group_name
                    ),
                    None,
                )
                # Have we found an exact match?
                if existing_group is not None:
                    logger.info(
                        "Found existing Microsoft 365 group -> %s (%s) - skip creation of group...",
                        existing_group["displayName"],
                        existing_group["id"],
                    )
                    # Write M365 group ID back into the payload (for the success file)
                    group["m365_id"] = existing_group["id"]
                    continue
                logger.info(
                    "Did not find an exact match for the group - creating a new Microsoft 365 group..."
                )
            else:
                logger.info(
                    "Did not find any matching group - creating a new Microsoft 365 group..."
                )

            # Now we know it is a new group...
            new_group = self._m365.add_group(group_name)
            if new_group is not None:
                # Store the Microsoft 365 group ID in payload:
                group["m365_id"] = new_group["id"]
                logger.info(
                    "New Microsoft 365 group -> %s with ID -> %s has been created",
                    group_name,
                    group["m365_id"],
                )
            else:
                success = False

        self.write_status_file(success, section_name, self._groups)

        return success

        # end method definition

    def process_users(self, section_name: str = "users") -> bool:
        """Process users in payload and create them in Extended ECM.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        Side Effects:
            the user items are modified by adding an "id" dict element that
            includes the technical ID of the user in Extended ECM
        """

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        #        if self.check_status_file(section_name):
        #            return True

        success: bool = True

        # Add all users in payload and establish membership in
        # specified groups:
        for user in self._users:
            # Sanity checks:
            if not "name" in user:
                logger.error("User is missing a login. Skipping to next user...")
                success = False
                continue
            user_name = user["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue

            # Sanity checks:
            if (
                not "password" in user
                or user["password"] is None
                or user["password"] == ""
            ):
                logger.info(
                    "User -> %s no password defined in payload, generating random password...",
                    user_name,
                )
                user["password"] = self.generate_password(
                    length=10, use_special_chars=True
                )

                description_attribue = {
                    "name": "description",
                    "value": "initial password: " + user["password"],
                }

                try:
                    user["extra_attributes"].append(description_attribue)
                except KeyError:
                    user["extra_attributes"] = [description_attribue]

            # Sanity checks:
            if not "base_group" in user:
                logger.warning(
                    "User -> %s is missing a base group - setting to default group",
                    user_name,
                )
                user["base_group"] = "DefaultGroup"

            # Check if the user does already exist (e.g. if job is restarted)
            # determine_user_id() also writes back the user ID into the payload
            # if it has gathered it from OTCS.
            user_id = self.determine_user_id(user)
            if user_id:
                logger.info(
                    "Found existing user -> %s (%s). Skipping to next user...",
                    user_name,
                    user_id,
                )
                continue
            logger.info("Did not find an existing user - creating a new user...")

            # Find the base group of the user. Assume 'Default Group' (= 1001) if not found:
            base_group = next(
                (
                    item["id"]
                    for item in self._groups
                    if item["name"] == user["base_group"] and item.get("id")
                ),
                1001,
            )

            # Now we know it is a new user...
            new_user = self._otcs.add_user(
                name=user_name,
                password=user["password"],
                first_name=user.get("firstname", ""),  # be careful - can be empty
                last_name=user.get("lastname", ""),  # be careful - can be empty
                email=user.get("email", ""),  # be careful - can be empty
                base_group=base_group,
                privileges=user.get("privileges", ["Login", "Public Access"]),
            )

            # Process group memberships of new user:
            if new_user is not None:
                new_user_id = self._otcs.get_result_value(new_user, "id")
                logger.info(
                    "New user -> %s with ID -> %s has been created",
                    user_name,
                    new_user_id,
                )
                # Write back user ID into payload
                user["id"] = new_user_id

                user_groups = user["groups"]  # list of groups the user is in
                for user_group in user_groups:
                    # Try to find the group dictionary item in the payload
                    # for user group name:
                    group = next(
                        (item for item in self._groups if item["name"] == user_group),
                        None,
                    )
                    if group:
                        group_id = group.get("id")  # Careful ID may not exist
                        group_name = group["name"]
                    else:
                        # if group is not in payload try to find group in OTCS
                        # in case it is a pre-existing group:
                        group = self._otcs.get_group(user_group)
                        group_id = self._otcs.get_result_value(group, "id")
                        if group_id is None:
                            logger.error(
                                "Group -> %s not found. Skipping...", user_group
                            )
                            success = False
                            continue
                        group_name = self._otcs.get_result_value(group, "name")

                    if group_id is None:
                        logger.error(
                            "Group -> %s does not have an ID. Cannot add user -> %s to this group. Skipping...",
                            group_name,
                            user["name"],
                        )
                        success = False
                        continue

                    logger.info(
                        "Add user -> %s (%s) to group -> %s (%s)",
                        user["name"],
                        user["id"],
                        group_name,
                        group_id,
                    )
                    response = self._otcs.add_group_member(user["id"], group_id)
                    if not response:
                        success = False
                # for some unclear reason the user is not added to its base group in OTDS
                # so we do this explicitly:
                response = self._otds.add_user_to_group(
                    user["name"], user["base_group"]
                )
                if not response:
                    success = False

                # Extra OTDS attributes for the user can be provided in "extra_attributes"
                # as part of the user payload.
                if "extra_attributes" in user:
                    extra_attributes = user["extra_attributes"]
                    for extra_attribute in extra_attributes:
                        attribute_name = extra_attribute.get("name")
                        attribute_value = extra_attribute.get("value")
                        if not attribute_name or not attribute_value:
                            logger.error(
                                "User attribute is missing a name or value. Skipping..."
                            )
                            success = False
                            continue
                        logger.info(
                            "Set user attribute -> %s to -> %s",
                            attribute_name,
                            attribute_value,
                        )
                        user_partition = self._otcs.config()["partition"]
                        if not user_partition:
                            logger.error("User partition not found!")
                            success = False
                            continue
                        self._otds.update_user(
                            user_partition,
                            user["name"],
                            attribute_name,
                            attribute_value,
                        )

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_users_sap(
        self, sap_object: SAP, section_name: str = "usersSAP"
    ) -> bool:
        """Process users in payload and sync them with SAP (passwords for now).

        Args:
            sap_object (SAP): SAP object
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        Side Effects:
            the user items are modified by adding an "id" dict element that
            includes the technical ID of the user in Extended ECM
        """

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        rfc_name = "ZFM_TERRA_RFC_CHNG_USR_PW"
        rfc_description = "RFC to update the SAP user password"
        rfc_call_options = ()

        # Add all users in payload and establish membership in
        # specified groups:
        for user in self._users:
            # Sanity checks:
            if not "name" in user:
                logger.error("User is missing a login. Skipping to next user...")
                success = False
                continue
            user_name = user["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue

            # Check if the user is enabled for SAP:
            if not "enable_sap" in user or not user["enable_sap"]:
                logger.info("User -> %s is not enabled for SAP. Skipping...", user_name)
                continue

            # Sanity checks:
            if not "password" in user:
                logger.error(
                    "User -> %s is missing a password. Cannot sync with SAP. Skipping to next user...",
                    user_name,
                )
                success = False
                continue
            user_password = user["password"]

            rfc_params = {
                "USERNAME": user_name,
                "PASSWORD": user_password,
            }

            logger.info(
                "Updating password of user -> %s in SAP. Calling SAP RFC -> %s (%s) with parameters -> %s ...",
                user_name,
                rfc_name,
                rfc_description,
                rfc_params,
            )

            result = sap_object.call(rfc_name, rfc_call_options, rfc_params)
            if result is None:
                logger.error(
                    "Failed to call SAP RFC -> %s to update password of user -> %s",
                    rfc_name,
                    user_name,
                )
                success = False
            elif result.get("RESULT") != "OK":
                logger.error(
                    "Result of SAP RFC -> %s is not OK, it returned -> %s failed items in result -> %s",
                    rfc_name,
                    str(result.get("FAILED")),
                    str(result),
                )
                success = False
                # Save result for status file content
                user["sap_sync_result"] = result
            else:
                logger.info(
                    "Successfully called RFC -> %s. Result -> %s", rfc_name, str(result)
                )
                # Save result for status file content
                user["sap_sync_result"] = result

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_users_m365(self, section_name: str = "usersM365") -> bool:
        """Process users in payload and create them in Microsoft 365 via MS Graph API.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not isinstance(self._m365, M365):
            logger.error(
                "Office 365 connection not setup properly. Skipping payload section -> %s...",
                section_name,
            )
            return False

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # Add all users in payload and establish membership in
        # specified groups:
        for user in self._users:
            # Sanity checks:
            if not "name" in user:
                logger.error("User is missing a login. Skipping to next user...")
                success = False
                continue
            user_name = user["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue
            if not "enable_o365" in user or not user["enable_o365"]:
                logger.info(
                    "Microsoft 365 is not enabled in payload for User -> %s. Skipping...",
                    user_name,
                )
                continue

            # Sanity checks:
            if not "password" in user:
                logger.error(
                    "User -> %s is missing a password. Skipping to next user...",
                    user_name,
                )
                success = False
                continue
            user_password = user["password"]
            # be careful with the following fields - they could be empty
            user_department = user.get("base_group", "")
            user_first_name = user.get("firstname", "")
            user_last_name = user.get("lastname", "")
            user_location = user.get("location", "US")
            user_email = user.get("email", user_name)

            # Check if the user does already exist in M365 (e.g. if job is restarted)
            m365_user_id = self.determine_user_id_m365(user)
            if not m365_user_id:
                logger.info(
                    "Did not find existing Micosoft 365 user - creating user %s...",
                    user_email,
                )

                # Now we know it is a new user...
                new_user = self._m365.add_user(
                    email=user_email,
                    password=user_password,
                    first_name=user_first_name,
                    last_name=user_last_name,
                    location=user_location,
                    department=user_department,
                )
                if new_user is not None:
                    # Store the Microsoft 365 user ID in payload:
                    user["m365_id"] = new_user["id"]
                    logger.info(
                        "New Microsoft 365 user -> %s with ID -> %s has been created",
                        user_name,
                        user["m365_id"],
                    )
                else:
                    logger.error(
                        "Failed to create new Microsoft 365 user -> %s. Skipping...",
                        user_name,
                    )
                    success = False
                    continue

            # Now we assign a license to the new M365 user.
            # First we see if there's a M365 SKU list in user
            # payload - if not we wrap the default SKU configured
            # for the m365 object into a single item list:
            existing_user_licenses = self._m365.get_user_licenses(user["m365_id"])
            sku_list = user.get("m365_skus", [self._m365.config()["skuId"]])
            for sku_id in sku_list:
                # Check if the M365 user already has this license:
                if not self._m365.exist_result_item(
                    existing_user_licenses, "skuId", sku_id
                ):
                    response = self._m365.assign_license_to_user(
                        user["m365_id"], sku_id
                    )
                    if not response:
                        logger.error(
                            "Failed to assign license -> %s to Microsoft 365 user -> %s",
                            sku_id,
                            user_name,
                        )
                        success = False
                    else:
                        if (
                            not "m365_skus" in user
                        ):  # this is only True if the default license from the m365 object is taken
                            user["m365_skus"] = [sku_id]
                        logger.info(
                            "License -> %s has been assigned to Microsoft 365 user -> %s",
                            sku_id,
                            user_name,
                        )
                else:
                    logger.info(
                        "Microsoft 365 user -> %s already has the license -> %s",
                        user_name,
                        sku_id,
                    )

            # Now we assign the Extended ECM Teams App to the new M365 user.
            # First we check if the app is already assigned to the user.
            # If not we install / assign the app. If the user already has
            # the Extended ECM app we try to uprade it:
            app_name = self._m365.config()["teamsAppName"]
            response = self._m365.get_teams_apps_of_user(
                user["m365_id"],
                f"contains(teamsAppDefinition/displayName, '{app_name}')",
            )
            if self._m365.exist_result_item(
                response, "displayName", app_name, sub_dict_name="teamsAppDefinition"
            ):
                logger.info(
                    "App -> %s is already installed for M365 user -> %s (%s). Trying to upgrade app...",
                    app_name,
                    user_name,
                    user["m365_id"],
                )
                response = self._m365.upgrade_teams_app_of_user(
                    user["m365_id"], app_name
                )
            else:
                logger.info(
                    "Install M365 Teams app -> %s for M365 user -> %s",
                    app_name,
                    user_name,
                )
                response = self._m365.assign_teams_app_to_user(
                    user["m365_id"], app_name
                )
                if not response:
                    logger.error(
                        "Failed to install the App -> %s for M365 user -> %s",
                        app_name,
                        user_name,
                    )
                    success = False
                    continue

            # Process Microsoft 365 group memberships of new user:
            if "m365_id" in user:
                user_id = user["m365_id"]
                # don't forget the base group (department) !
                group_names = user["groups"]
                if user_department:
                    group_names.append(user_department)
                logger.info(
                    "User -> %s has these groups in payload -> %s (including base group -> %s). Checking if they are Microsoft 365 Groups...",
                    user_name,
                    group_names,
                    user_department,
                )
                # Go through all group names:
                for group_name in group_names:
                    # Find the group payload item to the parent group name:
                    group = next(
                        (item for item in self._groups if item["name"] == group_name),
                        None,
                    )
                    if not group:
                        # if group is not in payload then this membership
                        # is not relevant for Microsoft 365. This could be system generated
                        # groups like "PageEdit" or "Business Administrators".
                        # In this case we do "continue" as we can't process parent groups
                        # either:
                        logger.info(
                            "No payload found for Group -> %s. Skipping...", group_name
                        )
                        continue
                    elif not "enable_o365" in group or not group["enable_o365"]:
                        # If Microsoft 365 is not enabled for this group in
                        # the payload we don't create a M365 but we do NOT continue
                        # as there may still be parent groups that are M365 enabled
                        # we want to put the user in (see below):
                        logger.info(
                            "Payload Group -> %s is not enabled for M365.", group_name
                        )
                    else:
                        response = self._m365.get_group(group_name)
                        if (
                            response is None
                            or not "value" in response
                            or not response["value"]
                        ):
                            logger.error(
                                "Microsoft 365 Group -> %s not found. Skipping...",
                                group_name,
                            )
                            success = False
                        else:
                            group_id = response["value"][0]["id"]

                            # Check if user is already a member. We don't want
                            # to throw an error if the user is not found as a member
                            # so we pass show_error=False:
                            if self._m365.is_member(
                                group_id, user_id, show_error=False
                            ):
                                logger.info(
                                    "Microsoft 365 user -> %s (%s) is already in Microsoft 365 group -> %s (%s)",
                                    user["name"],
                                    user_id,
                                    group_name,
                                    group_id,
                                )
                            else:
                                logger.info(
                                    "Add Microsoft 365 user -> %s (%s) to Microsoft 365 group -> %s (%s)",
                                    user["name"],
                                    user_id,
                                    group_name,
                                    group_id,
                                )
                                response = self._m365.add_group_member(
                                    group_id, user_id
                                )
                                if not response:
                                    logger.error(
                                        "Failed to add Microsoft 365 user -> %s (%s) to Microsoft 365 group -> %s (%s)",
                                        user["name"],
                                        user_id,
                                        group_name,
                                        group_id,
                                    )
                                    success = False

                                # As each group should have at least one owner in M365
                                # we set all users also as owners for now. Later we
                                # may want to configure this via payload:
                                logger.info(
                                    "Make Microsoft 365 user -> %s (%s) owner of Microsoft 365 group -> %s (%s)",
                                    user["name"],
                                    user_id,
                                    group_name,
                                    group_id,
                                )
                                response = self._m365.add_group_owner(group_id, user_id)
                                if not response:
                                    logger.error(
                                        "Failed to make Microsoft 365 user -> %s (%s) owner of Microsoft 365 group -> %s (%s)",
                                        user["name"],
                                        user_id,
                                        group_name,
                                        group_id,
                                    )
                                    success = False

                    # As M365 groups are flat (not nested) we also add the
                    # user as member to the parent groups of the current group
                    # if the parent group is enabled for M365:
                    parent_group_names = group.get("parent_groups")
                    logger.info(
                        "Group -> %s has the following parent groups -> %s",
                        group_name,
                        parent_group_names,
                    )
                    for parent_group_name in parent_group_names:
                        # Find the group dictionary item to the parent group name:
                        parent_group = next(
                            (
                                item
                                for item in self._groups
                                if item["name"] == parent_group_name
                            ),
                            None,
                        )
                        if (
                            parent_group is None
                            or not "enable_o365" in parent_group
                            or not parent_group["enable_o365"]
                        ):
                            # if parent group is not in payload then this membership
                            # is not relevant for Microsoft 365.
                            # If Office 365 is not enabled for this parent group in
                            # the payload we can also skip:
                            logger.info(
                                "Parent Group -> %s is not enabled for M365. Skipping...",
                                group_name,
                            )
                            continue

                        response = self._m365.get_group(parent_group_name)
                        if (
                            response is None
                            or not "value" in response
                            or not response["value"]
                        ):
                            logger.error(
                                "Microsoft 365 Group -> %s not found. Skipping...",
                                group_name,
                            )
                            success = False
                            continue
                        parent_group_id = response["value"][0]["id"]

                        # Check if user is already a member. We don't want
                        # to throw an error if the user is not found as a member:
                        if self._m365.is_member(
                            parent_group_id, user_id, show_error=False
                        ):
                            logger.info(
                                "Microsoft 365 user -> %s (%s) is already in Microsoft 365 group -> %s (%s)",
                                user["name"],
                                user_id,
                                parent_group_name,
                                parent_group_id,
                            )
                            continue

                        logger.info(
                            "Add Microsoft 365 user -> %s (%s) to Microsoft 365 group -> %s (%s)",
                            user["name"],
                            user_id,
                            parent_group_name,
                            parent_group_id,
                        )
                        self._m365.add_group_member(parent_group_id, user_id)

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_teams_m365(self, section_name: str = "teamsM365") -> bool:
        """Process groups in payload and create matching Teams in Microsoft 365.
           We need to do this after the creation of the M365 users as wie require
           Group Owners to create teams.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not isinstance(self._m365, M365):
            logger.error(
                "Office 365 connection not setup properly. Skipping payload section -> %s...",
                section_name,
            )
            return False

        if not self._groups:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for group in self._groups:
            if not "name" in group:
                logger.error("Team needs a name. Skipping...")
                success = False
                continue
            group_name = group["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in group and not group["enabled"]:
                logger.info(
                    "Payload for Group -> %s is disabled. Skipping...", group_name
                )
                continue
            if not "enable_o365" in group or not group["enable_o365"]:
                logger.info(
                    "Office 365 is not enabled in payload for Group -> %s. Skipping...",
                    group_name,
                )
                continue

            # Check if the M365 group does not exist (this should actually never happen at this point)
            if not "m365_id" in group:
                # The "m365_id" value is set by the method process_groups_m365()
                logger.error(
                    "No M365 Group exist for group -> %s (M365 Group creation may have failed). Skipping...",
                    group_name,
                )
                success = False
                continue

            if self._m365.has_team(group_name):
                logger.info(
                    "M365 group -> %s already has an MS Team connected. Skipping...",
                    group_name,
                )
                continue

            logger.info(
                "Create M365 Team -> %s for existing M365 Group -> %s...",
                group_name,
                group_name,
            )
            # Now "upgrading" this group to a MS Team:
            new_team = self._m365.add_team(group_name)
            if not new_team:
                success = False
                continue

        self.write_status_file(success, section_name, self._groups)

        return success

        # end method definition

    def process_teams_m365_apps(
        self, section_name: str = "teamsM365Apps", tab_name: str = "Extended ECM"
    ) -> bool:
        """Process groups in payload and configure Extended ECM Teams Apps
           as a tab called "Extended ECM".
           We need to do this after the transport as we need top level folders
           we can point the Extended ECM teams app to.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webHooksPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
            tab_name (str, optional): Name of the Extended ECM tab. Default is "Extended ECM".
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not isinstance(self._m365, M365):
            logger.error(
                "Office 365 connection not setup properly. Skipping payload section -> %s...",
                section_name,
            )
            return False

        if not self._groups:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # Determine the ID of the Extended ECM App:
        app_name = self._m365.config()["teamsAppName"]
        response = self._m365.get_teams_apps(f"contains(displayName, '{app_name}')")
        # Get the App catalog ID:
        app_catalog_id = self._m365.get_result_value(response, "id", 0)
        if not app_catalog_id:
            logger.error("M365 App -> %s not found in catalog!", app_name)
            return False

        for group in self._groups:
            if not "name" in group:
                logger.error("Team needs a name. Skipping...")
                success = False
                continue
            group_name = group["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in group and not group["enabled"]:
                logger.info(
                    "Payload for Group -> %s is disabled. Skipping...", group_name
                )
                continue
            if not "enable_o365" in group or not group["enable_o365"]:
                logger.info(
                    "Office 365 is not enabled in payload for Group -> %s. Skipping...",
                    group_name,
                )
                continue

            #
            # Now we create a tab in the "General" channel for the Extended ECM Teams App
            #

            # 1. Check if the tab is already assigned to the General channel.
            # This determines if we need to create or update the tab / app:
            app_name = self._m365.config()["teamsAppName"]
            response = self._m365.get_team_channel_tabs(
                team_name=group_name, channel_name="General"
            )
            # Check if tab is already there:
            if self._m365.exist_result_item(response, "displayName", tab_name):
                logger.info(
                    "M365 Teams app -> %s is already configured for M365 Team -> %s. Updating it with new URLs and IDs...",
                    app_name,
                    tab_name,
                )
                update = True  # update existing tab
            else:
                logger.info(
                    "Add tab -> %s to channel -> General of M365 Team -> %s for app -> %s",
                    tab_name,
                    group_name,
                    app_name,
                )
                update = False  # create new tab

            # 2. Determine the M365 Team ID. If the team is not found then skip:
            response = self._m365.get_team(group_name)
            team_id = self._m365.get_result_value(response, "id", 0)
            if not team_id:
                logger.error("M365 Team -> %s not found!", group_name)
                success = False
                continue

            # 3. Install the App for the particular M365 Team (if it is not yet installed):
            response = self._m365.get_teams_apps_of_team(
                team_id,
                f"contains(teamsAppDefinition/displayName, '{app_name}')",
            )
            if self._m365.exist_result_item(
                response, "displayName", app_name, sub_dict_name="teamsAppDefinition"
            ):
                logger.info(
                    "App -> %s is already installed for M365 Team -> %s (%s). Trying to upgrade app...",
                    app_name,
                    group_name,
                    team_id,
                )
                response = self._m365.upgrade_teams_app_of_team(team_id, app_name)
                if not response:
                    logger.error(
                        "Failed to upgrade the existing app -> %s for the M365 Team -> %s",
                        app_name,
                        group_name,
                    )
                    success = False
                    continue
            else:
                logger.info(
                    "Install M365 Teams app -> %s for M365 team -> %s",
                    app_name,
                    group_name,
                )
                response = self._m365.assign_teams_app_to_team(
                    team_id=team_id, app_id=app_catalog_id
                )
                if not response:
                    logger.error(
                        "Failed to install App -> %s (%s) for M365 Team -> %s",
                        app_name,
                        app_catalog_id,
                        group_name,
                    )
                    success = False
                    continue

            # 4. Create a Tab in the "General" channel of the M365 Team:
            if group_name == "Innovate":
                # Use the Enterprise Workspace for the
                # top-level group "Innovate":
                node_id = 2000
            else:
                # We assume the departmental group names are identical to
                # top-level folders in the Enterprise volume
                node = self._otcs.get_node_by_parent_and_name(2000, group_name)
                node_id = self._otcs.get_result_value(node, "id")
                if not node_id:
                    logger.warning(
                        "Cannot find a top-level container for group -> %s. Cannot configure M365 Teams app. Skipping...",
                        group_name,
                    )
                    continue

            app_url = (
                self._otcs_frontend.cs_support_public_url()
            )  # it is important to use the frontend pod URL here
            app_url += "/xecmoffice/teamsapp.html?nodeId="
            app_url += (
                str(node_id) + "&type=container&parentId=2000&target=content&csurl="
            )
            app_url += self._otcs_frontend.cs_public_url()
            app_url += "&appId=" + app_catalog_id

            if update:
                # App / Tab exist but needs to be updated with new
                # IDs for the new deployment of Extended ECM
                # as the M365 Teams survive between Terrarium deployments:

                logger.info(
                    "Updating tab -> %s of M365 Team channel -> General for app -> %s (%s) with new URLs and node IDs",
                    tab_name,
                    app_name,
                    app_catalog_id,
                )

                response = self._m365.update_teams_app_of_channel(
                    team_name=group_name,
                    channel_name="General",
                    tab_name=tab_name,
                    app_url=app_url,
                    cs_node_id=node_id,
                )
            else:
                # Tab does not exist in "General" channel so we
                # add / configure it freshly:

                logger.info(
                    "Adding tab -> %s to M365 Team channel -> General for app -> %s (%s)",
                    tab_name,
                    app_name,
                    app_catalog_id,
                )

                response = self._m365.add_teams_app_to_channel(
                    team_name=group_name,
                    channel_name="General",
                    app_id=app_catalog_id,
                    tab_name=tab_name,
                    app_url=app_url,
                    cs_node_id=node_id,
                )
                if not response:
                    logger.error(
                        "Failed to add tab -> %s to M365 Team channel -> General for app -> %s (%s)",
                        tab_name,
                        app_name,
                        app_catalog_id,
                    )

        self.write_status_file(success, section_name, self._groups)

        return success

        # end method definition

    def cleanup_stale_teams_m365(self, workspace_types: list) -> bool:
        """Delete Microsoft Teams that are left-overs from former deployments.
           This method is currently not used.

        Args:
            workspace_types (list): list of all workspace types
        Returns:
            bool: True if successful, False otherwise
        """

        if not isinstance(self._m365, M365):
            logger.error(
                "Office 365 connection not setup properly. Skipping cleanup...",
            )
            return False

        if workspace_types == []:
            logger.error("Empty workspace type list!")
            return False

        for workspace_type in workspace_types:
            if not "name" in workspace_type:
                logger.error(
                    "Workspace type -> %s does not have a name. Skipping...",
                    workspace_type,
                )
                continue
            response = self._otcs.get_workspace_instances(workspace_type["name"])
            workspace_instances = response["results"]
            if not workspace_instances:
                logger.info(
                    "Workspace type -> %s does not have any instances!",
                    workspace_type["name"],
                )
                continue
            for workspace_instance in workspace_instances:
                workspace_name = workspace_instance["data"]["properties"]["name"]
                logger.info(
                    "Check if stale Microsoft 365 Teams with name -> %s exist...",
                    workspace_name,
                )
                response = self._m365.delete_teams(workspace_name)

        return True

        # end method definition

    def cleanup_all_teams_m365(self, section_name: str = "teamsM365Cleanup") -> bool:
        """Delete Microsoft Teams that are left-overs from former deployments

        Args:
            section_name (str, optional): name of the section.
                                          This name is used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if teams have been deleted, False otherwise
        """

        if not isinstance(self._m365, M365):
            logger.error(
                "Office 365 connection not setup properly. Skipping payload section -> %s...",
                section_name,
            )
            return False

        # We want this cleanup to only run once even if we have
        # multiple payload files - so we pass payload_specific=False here:
        if self.check_status_file(
            payload_section_name=section_name, payload_specific=False
        ):
            logger.info(
                "Payload section -> %s has been processed successfully before. Skip cleanup of M365 teams...",
                section_name,
            )
            return True

        logger.info("Processing payload section -> %s...", section_name)

        # We don't want to delete MS Teams that are matching the regular OTCS Group Names (like "Sales")
        exception_list = self.get_all_group_names()

        # These are the patterns that each MS Teams needs to match at least one of to be deleted
        # Pattern 1: all MS teams with a name that has a number in brackets, line "(1234)"
        # Pattern 2: all MS Teams with a name that starts with a number followed by a space,
        #            followed by a "-" and followed by another space
        # Pattern 3: all MS Teams with a name that starts with "WS" and a 1-4 digit number
        #            (these are the workspaces for Purchase Contracts generated for Intelligent Filing)
        # Pattern 4: all MS Teams with a name that ends with a 1-2 character + a number in brackets, like (US-1000)
        #            this is a specialization of pattern 1
        # Pattern 5: remove the teams that are created for the dummy copy&paste template for the
        #            Intelligent Filing workspaces
        pattern_list = [
            r"\(\d+\)",
            r"\d+\s-\s",
            r"^WS\d{1,4}$",
            r"^.+?\s\(.{1,2}-\d+\)$",
            r"Purchase\sContract\s\(Template\sfor\sIntelligent\sFiling\)",
        ]

        result = self._m365.delete_all_teams(exception_list, pattern_list)

        # We want this cleanup to only run once even if we have
        # multiple payload files - so we pass payload_specific=False here:
        self.write_status_file(
            success=True,
            payload_section_name=section_name,
            payload_section=exception_list + pattern_list,
            payload_specific=False,
        )

        return result

        # end method definition

    def process_admin_settings(
        self, admin_settings: list, section_name: str = "adminSettings"
    ) -> bool:
        """Process admin settings in payload and import them to Extended ECM.

            The payload section is a list of dicts with these items:
            {
                enabled: True or False to enable or disable the payload item
                filename: The filename of the XML file with admin settings.
                          It needs to be the plain filename like "admin.xml".
                          The files reside inside the container in /settings root
                          directory. They are placed there by the Terraform automation
                          and are taken from the ./settings/payload directory.
                description: Some description about the purpose of the settings.
                             Just for information and optional.
            }

        Args:
            admin_settings (list): list of admin settings. We need this parameter
                                   as we process two different lists.
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "adminSettingsPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if a restart of the OTCS pods is required. False otherwise.
        """

        if not admin_settings:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return False  # important to return False here as otherwise we are triggering a restart of services!!

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return False  # important to return False here as otherwise we are triggering a restart of services!!

        restart_required: bool = False
        success: bool = True

        for admin_setting in admin_settings:
            # Sanity checks:
            if not "filename" in admin_setting:
                logger.error("Filename is missing. Skipping to next admin setting...")
                continue
            filename = admin_setting["filename"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in admin_setting and not admin_setting["enabled"]:
                logger.info(
                    "Payload for setting file -> %s is disabled. Skipping...", filename
                )
                continue

            settings_file = self._custom_settings_dir + filename
            if os.path.exists(settings_file):
                description = admin_setting.get("description")
                if description:
                    logger.info(description)

                # Read the config file:
                with open(settings_file, "r", encoding="utf-8") as file:
                    file_content = file.read()

                logger.debug(
                    "Replace Placeholder -> %s in file -> %s",
                    self._placeholder_values,
                    file_content,
                )

                file_content = self.replace_placeholders(file_content)

                # Write the updated config file:
                tmpfile = "/tmp/" + os.path.basename(settings_file)
                with open(tmpfile, "w", encoding="utf-8") as file:
                    file.write(file_content)

                response = self._otcs.apply_config(tmpfile)
                if response and response["results"]["data"]["restart"]:
                    logger.info("A restart of Extended ECM service is required.")
                    restart_required = True
            else:
                logger.error("Admin settings file -> %s not found.", settings_file)
                success = False

        self.write_status_file(success, section_name, admin_settings)

        return restart_required

        # end method definition

    def check_external_system(self, external_system: dict) -> bool:
        """Check if external system is reachable

        Args:
            external_system (dict): payload data structure of external system.
                                    We assume here that sanity check for
                                    valid data is already done before.

        Returns:
            bool: True = system is reachable, False otherwise
        """

        as_url = external_system["as_url"]

        # Extract the hostname:
        external_system_hostname = urlparse(as_url).hostname
        # Write this information back into the data structure:
        external_system["external_system_hostname"] = external_system_hostname
        # Extract the port:
        external_system_port = urlparse(as_url).port if urlparse(as_url).port else 80
        # Write this information back into the data structure:
        external_system["external_system_port"] = external_system_port

        if self._http_object.check_host_reachable(
            external_system_hostname, external_system_port
        ):
            logger.info(
                "Mark external system -> %s as reachable for later workspace creation and SAP RFC processing...",
                external_system["external_system_name"],
            )
            external_system["reachable"] = True
            return True
        else:
            external_system["reachable"] = False
            return False

    def process_external_systems(self, section_name: str = "externalSystems") -> bool:
        """Process external systems in payload and create them in Extended ECM.

            The payload section is a list of dicts (each representing one external
            system) with these items:
            {
                enabled: True or False to enable or disable the payload item
                external_system_name: Name of the external systen.
                external_system_type: Type of the external system.
                                      Possible values are
                                      * SAP
                                      * SuccessFactors
                                      * Salesforce
                                      * AppWorks Platform
                base_url: Base URL of the external system
                as_url: Application Server URL of the external system
                username: (Technical) User Name for the connection
                password: Passord of the (technical) user
                oauth_client_id: OAuth client ID
                oauth_client_secret: OAuth client secret
                archive_logical_name: Logical name of Archive for SAP
                archive_certificate_file: Path and filename to certificate file.
                                          This file is inside the customizer
                                          pof file system.
            }
            If OAuth Client ID and Client Secret are provided then username
            and password are no longer used.

            In the payload for SAP external systems there are additional
            items "client", "destination" that are processed by init_sap()

        Args:
            section_name (str, optional): name of the section.
                                          This name is used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        Side Effects:
            - based on system_type different other settings in the dict are set
            - reachability is tested and a flag is set in the payload dict
        """

        if not self._external_systems:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        # if self.check_status_file(section_name):
        #   return True

        success: bool = True

        for external_system in self._external_systems:
            #
            # 1: Do sanity checks for the payload:
            #
            if not "external_system_name" in external_system:
                logger.error(
                    "External System connection needs a logical system name! Skipping to next external system..."
                )
                success = False
                continue
            system_name = external_system["external_system_name"]

            if not "external_system_type" in external_system:
                logger.error(
                    "External System connection -> %s needs a type (SAP, Salesfoce, SuccessFactors, AppWorks Platform)! Skipping to next external system...",
                    system_name,
                )
                success = False
                continue
            system_type = external_system["external_system_type"]

            if "enabled" in external_system and not external_system["enabled"]:
                logger.info(
                    "Payload for External System -> %s (%s) is disabled. Skipping...",
                    system_name,
                    system_type,
                )
                continue

            # Possible Connection Types for external systems:
            # "Business Scenario Sample" (Business Scenarios Sample Adapter)
            # "ot.sap.c4c.SpiAdapter" (SAP C4C SPI Adapter)
            # "ot.sap.c4c.SpiAdapterV2" (C4C SPI Adapter V2)
            # "HTTP" (Default WebService Adapter)
            # "ot.sap.S4HANAAdapter" (S/4HANA SPI Adapter)
            # "SF" (SalesForce Adapter)
            # "SFInstance" (SFWebService)

            # Set the default settings for the different system types:
            match system_type:
                # Check if we have a SuccessFactors system:
                case "SuccessFactors":
                    connection_type = "SFInstance"
                    auth_method = "OAUTH"
                    username = None
                    password = None
                case "SAP":
                    connection_type = "HTTP"
                    auth_method = "BASIC"
                    oauth_client_id = None
                    oauth_client_secret = None
                case "Salesforce":
                    connection_type = "SF"
                    auth_method = "OAUTH"
                    username = None
                    password = None
                case "AppWorks Platform":
                    connection_type = "HTTP"
                    auth_method = "BASIC"
                    oauth_client_id = None
                    oauth_client_secret = None
                case "Business Scenario Sample":
                    connection_type = "Business Scenario Sample"
                    auth_method = "BASIC"
                    oauth_client_id = None
                    oauth_client_secret = None
                case _:
                    logger.error("Unsupported system_type defined -> %s", system_type)
                    return False

            if not "base_url" in external_system:
                base_url = ""  # baseUrl is optional
            else:
                base_url = external_system["base_url"]

            if not "as_url" in external_system:
                logger.warning(
                    "External System connection -> %s needs an Application Server URL! Skipping to next external system...",
                    system_name,
                )
                success = False
                continue
            as_url = external_system["as_url"]

            # Check if external system is reachable and
            # update the payload dict with a "reachable" key/value pair:
            self.check_external_system(external_system)

            # Read either username/password (BASIC) or client ID / secret (OAuth)
            match auth_method:
                case "BASIC":
                    if not "username" in external_system:
                        logger.warning(
                            "External System connection -> %s needs a user name for BASIC authentication! Skipping to next external system...",
                            system_name,
                        )
                        continue
                    if not "password" in external_system:
                        logger.warning(
                            "External System connection -> %s needs a password for BASIC authentication! Skipping to next external system...",
                            system_name,
                        )
                        continue
                    username = external_system["username"]
                    password = external_system["password"]
                    oauth_client_id = ""
                    oauth_client_secret = ""

                case "OAUTH":
                    if not "oauth_client_id" in external_system:
                        logger.error(
                            "External System connection -> %s is missing OAuth client ID! Skipping to next external system...",
                            system_name,
                        )
                        success = False
                        continue
                    if not "oauth_client_secret" in external_system:
                        logger.error(
                            "External System connection -> %s is missing OAuth client secret! Skipping to next external system...",
                            system_name,
                        )
                        success = False
                        continue
                    oauth_client_id = external_system["oauth_client_id"]
                    oauth_client_secret = external_system["oauth_client_secret"]
                    # For backward compatibility we also read username/password
                    # with OAuth settings:
                    username = (
                        external_system["username"]
                        if external_system.get("username")
                        else None
                    )
                    password = (
                        external_system["password"]
                        if external_system.get("password")
                        else None
                    )
                case _:
                    logger.error(
                        "Unsupported authorization method specified (%s) , Skipping ... ",
                        auth_method,
                    )
                    return False

            # We do this existance test late in this function to make sure the payload
            # datastructure is properly updated for debugging purposes.
            logger.info(
                "Test if external system -> %s does already exist...", system_name
            )
            if self._otcs.get_external_system_connection(system_name):
                logger.info(
                    "External System connection -> %s already exists! Skipping to next external system...",
                    system_name,
                )
                continue

            #
            # Create External System:
            #
            logger.info(
                "Create external system -> %s; type -> %s", system_name, connection_type
            )
            response = self._otcs.add_external_system_connection(
                connection_name=system_name,
                connection_type=connection_type,
                as_url=as_url,
                base_url=base_url,
                username=str(username),
                password=str(password),
                authentication_method=auth_method,
                client_id=oauth_client_id,
                client_secret=oauth_client_secret,
            )
            if response is None:
                logger.error(
                    "Failed to create external system -> %s; type -> %s",
                    system_name,
                    connection_type,
                )
                success = False
            else:
                logger.info("Successfully created external system -> %s", system_name)

            #
            # In case of an SAP external system we also do some Archiving config:
            #
            if system_type == "SAP":
                if (
                    "archive_logical_name" in external_system
                    and "archive_certificate_file" in external_system
                    and self._otac
                ):
                    logger.info(
                        "Put certificate file -> %s for logical archive -> %s into Archive Center",
                        external_system["archive_certificate_file"],
                        external_system["archive_logical_name"],
                    )
                    response = self._otac.put_cert(
                        external_system["external_system_name"],
                        external_system["archive_logical_name"],
                        external_system["archive_certificate_file"],
                    )
                    logger.info(
                        "Enable certificate file -> %s for logical archive -> %s",
                        external_system["archive_certificate_file"],
                        external_system["archive_logical_name"],
                    )
                    response = self._otac.enable_cert(
                        external_system["external_system_name"],
                        external_system["archive_logical_name"],
                        True,
                    )

        self.write_status_file(success, section_name, self._external_systems)

        return success

        # end method definition

    def process_transport_packages(
        self, transport_packages: list, section_name: str = "transportPackages"
    ) -> bool:
        """Process transport packages in payload and import them to Extended ECM.

        Args:
            transport_packages (list): list of transport packages. As we
                                       have three different lists (transport,
                                       content_transport, transport_post) so
                                       we need a parameter
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "transportPackagesPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not transport_packages:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for transport_package in transport_packages:
            if not "name" in transport_package:
                logger.error(
                    "Transport Package needs a name! Skipping to next transport..."
                )
                success = False
                continue
            name = transport_package["name"]

            if "enabled" in transport_package and not transport_package["enabled"]:
                logger.info(
                    "Payload for Transport Package -> %s is disabled. Skipping...", name
                )
                continue

            if not "url" in transport_package:
                logger.error(
                    "Transport Package -> %s needs a URL! Skipping to next transport...",
                    name,
                )
                success = False
                continue
            if not "description" in transport_package:
                logger.warning("Transport Package -> %s is missing a description", name)
            url = transport_package["url"]
            description = transport_package["description"]

            # For some transports there can be string replacements
            # configured:
            if "replacements" in transport_package:
                replacements = transport_package["replacements"]
                logger.info(
                    "Deploy transport -> %s with replacements -> %s; URL -> %s",
                    description,
                    url,
                    replacements,
                )
                response = self._otcs.deploy_transport(
                    url, name, description, replacements
                )
            else:
                logger.info("Deploy transport -> %s; URL -> %s", description, url)
                response = self._otcs.deploy_transport(url, name, description)
            if response is None:
                logger.error("Failed to deploy transport -> %s; URL -> %s", name, url)
                success = False
                if self._stop_on_error:
                    break
            else:
                logger.info("Successfully deployed transport -> %s", name)

        self.write_status_file(success, section_name, transport_packages)

        return success

        # end method definition

    def process_user_photos(self, section_name: str = "userPhotos") -> bool:
        """Process user photos in payload and assign them to Extended ECM users.

        Args:
            section_name (str, optional): name of the section.
                                          This name is used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # we assume the nickname of the photo item equals the login name of the user
        # we also assume that the photos have been uploaded / transported into the target system
        for user in self._users:
            user_name = user["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue

            if not "id" in user:
                logger.error(
                    "User -> %s does not have an ID. The user creation may have failed before. Skipping...",
                    user_name,
                )
                success = False
                continue

            user_id = user["id"]

            response = self._otcs.get_node_from_nickname(user_name)
            if response is None:
                logger.warning(
                    "Missing photo for user -> %s - nickname not found. Skipping...",
                    user_name,
                )
                continue
            photo_id = self._otcs.get_result_value(response, "id")
            response = self._otcs.update_user_photo(user_id, photo_id)
            if not response:
                logger.error("Failed to add photo for user -> %s", user_name)
                success = False
            else:
                logger.info("Successfully added photo for user -> %s", user_name)

        # Check if Admin has a photo as well (nickname needs to be "admin"):
        response = self._otcs.get_node_from_nickname("admin")
        if response is None:
            logger.warning("Missing photo for admin - nickname not found. Skipping...")
        else:
            photo_id = self._otcs.get_result_value(response, "id")
            response = self._otcs.update_user_photo(1000, photo_id)
            if response is None:
                logger.warning("Failed to add photo for admin")
            else:
                logger.info("Successfully added photo for admin")

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_user_photos_m365(self, section_name: str = "userPhotosM365") -> bool:
        """Process user photos in payload and assign them to Microsoft 365 users.

        Args:
            section_name (str, optional): name of the section.
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not isinstance(self._m365, M365):
            logger.error(
                "Office 365 connection not setup properly. Skipping payload section -> %s...",
                section_name,
            )
            return False

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # we assume the nickname of the photo item equals the login name of the user
        # we also assume that the photos have been uploaded / transported into the target system
        for user in self._users:
            user_name = user["name"]
            if not "id" in user:
                logger.error(
                    "User -> %s does not have an ID. The user creation may have failed before. Skipping...",
                    user_name,
                )
                success = False
                continue

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue
            if not "enable_o365" in user or not user["enable_o365"]:
                logger.info(
                    "Microsoft 365 is not enabled in payload for User -> %s. Skipping...",
                    user_name,
                )
                continue

            # If the customizer pod is restarted it may be that
            # the M365 user exists even if the M365 user ID is
            # not yet written back into the payload. So we use the
            # determine_user_id_m365() method that handles both cases
            # and updates the payload if the user exists in M365 already.
            user_m365_id = self.determine_user_id_m365(user)
            if not user_m365_id:
                logger.error("M365 user -> %s does not exist. Skipping...", user_name)
                success = False
                continue

            if self._m365.get_user_photo(user_m365_id, show_error=False):
                logger.info(
                    "User -> %s (%s) has already a photo in Microsoft 365. Skipping...",
                    user_name,
                    user_m365_id,
                )
                continue
            else:
                logger.info(
                    "User -> %s (%s) has not yet a photo in Microsoft 365. Uploading...",
                    user_name,
                    user_m365_id,
                )

            response = self._otcs.get_node_from_nickname(user_name)
            if response is None:
                logger.warning(
                    "Missing photo for user -> %s - nickname not found. Skipping...",
                    user_name,
                )
                continue
            photo_id = self._otcs.get_result_value(response, "id")
            photo_name = self._otcs.get_result_value(response, "name")
            photo_path = "/tmp/" + str(photo_name)
            response = self._otcs.download_document(photo_id, photo_path)
            if response is None:
                logger.warning(
                    "Failed to download photo for user -> %s from Extended ECM",
                    user_name,
                )
                success = False
                continue
            else:
                logger.info(
                    "Successfully downloaded photo for user -> %s from Extended ECM to file -> %s",
                    user_name,
                    photo_path,
                )

            # Upload photo to M365:
            response = self._m365.update_user_photo(user_m365_id, photo_path)
            if response is None:
                logger.error(
                    "Failed to upload photo for user -> %s to Microsoft 365", user_name
                )
                success = False
            else:
                logger.info(
                    "Successfully uploaded photo for user -> %s to Microsoft 365",
                    user_name,
                )

        # Check if Admin has a photo as well (nickname needs to be "admin")
        # Then we want this to be applied in M365 as well:
        response = self._otcs.get_node_from_nickname("admin")
        if response is None:
            logger.warning("Missing photo for admin - nickname not found. Skipping...")
        else:
            photo_id = self._otcs.get_result_value(response, "id")
            photo_name = self._otcs.get_result_value(response, "name")
            photo_path = "/tmp/" + str(photo_name)
            response = self._otcs.download_document(photo_id, photo_path)
            if response is None:
                logger.warning(
                    "Failed to download photo for admin user from Extended ECM",
                )
                success = False
            else:
                logger.info(
                    "Successfully downloaded photo for admin from Extended ECM to file -> %s",
                    photo_path,
                )
                m365_admin_email = "admin@" + self._m365.config()["domain"]
                response = self._m365.update_user_photo(m365_admin_email, photo_path)
                if response is None:
                    logger.warning("Failed to add photo for %s", m365_admin_email)
                else:
                    logger.info("Successfully added photo for %s", m365_admin_email)

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_workspace_types(self, section_name: str = "workspaceTypes") -> list:
        """Create a data structure for all workspace types in the Extended ECM system.

        Args:
            section_name (str, optional): name of the section.
                                          This name is used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            list: list of workspace types. Each list element is a dict with these values:
                - id (str)
                - name (str)
                - templates (list)
                    + name (str)
                    + id
        """

        # If this payload section has been processed successfully before we
        # still need to read the data structure from the status file and
        # initialize self._workspace_types:
        if self.check_status_file(section_name):
            # read the list from the json file in admin Home
            # this is important for restart of customizer pod
            # as this data structure is used later on for workspace processing
            logger.info("Re-Initialize workspace types list for later use...")
            self._workspace_types = self.get_status_file(section_name)
            return self._workspace_types

        # get all workspace types (these have been created by the transports and are not in the payload!):
        response = self._otcs.get_workspace_types()
        if response is None:
            logger.error("No workspace types found!")
            self._workspace_types = []
        else:
            self._workspace_types = response["results"]

        # now we enrich the workspace_type list elments (which are dicts)
        # with additional dict elements for further processing:
        for workspace_type in self._workspace_types:
            workspace_type_id = workspace_type["data"]["properties"]["wksp_type_id"]
            logger.info("Workspace Types ID -> %s", workspace_type_id)
            workspace_type["id"] = workspace_type_id
            workspace_type_name = workspace_type["data"]["properties"]["wksp_type_name"]
            logger.info("Workspace Types Name -> %s", workspace_type_name)
            workspace_type["name"] = workspace_type_name
            workspace_templates = workspace_type["data"]["properties"]["templates"]
            # Create empty lists of dicts with template names and node IDs:
            workspace_type["templates"] = []
            if workspace_templates:
                # Determine available templates per workspace type (there can be multiple!)
                for workspace_template in workspace_templates:
                    workspace_template_id = workspace_template["id"]
                    workspace_template_name = workspace_template["name"]
                    logger.info(
                        "Found template with name -> %s and ID -> %s",
                        workspace_template_name,
                        workspace_template_id,
                    )
                    template = {
                        "name": workspace_template_name,
                        "id": workspace_template_id,
                    }
                    workspace_type["templates"].append(template)

                    # Workaround for problem with workspace role inheritance
                    # which may be related to Transport or REST API: to work-around this we
                    # push down the workspace roles to the workspace folders explicitly:
                    response = self._otcs.get_workspace_roles(workspace_template_id)

                    for roles in response["results"]:
                        role_name = roles["data"]["properties"]["name"]
                        role_id = roles["data"]["properties"]["id"]
                        permissions = roles["data"]["properties"]["perms"]
                        # as get_workspace_roles() delivers permissions as a value (bit encoded)
                        # we need to convert it to a permissions string list:
                        permission_string_list = (
                            self._otcs.convert_permission_value_to_permission_string(
                                permissions
                            )
                        )

                        logger.info(
                            "Inherit permissions of workspace template -> %s and role -> %s to workspace folders...",
                            workspace_template_name,
                            role_name,
                        )

                        # Inherit permissions to folders of workspace template:
                        response = self._otcs.assign_workspace_permissions(
                            workspace_template_id,
                            role_id,
                            permission_string_list,
                            1,  # Only sub items - workspace node itself is OK
                        )

            else:
                logger.warning(
                    "Workspace Types Name -> %s has no templates!", workspace_type_name
                )
                continue

        self.write_status_file(True, section_name, self._workspace_types)

        return self._workspace_types

        # end method definition

    def process_workspace_templates(
        self, section_name: str = "workspaceTemplates"
    ) -> bool:
        """Process Workspace Template playload. This allows to define role members on
           template basis. This avoids having to "pollute" workspace template templates
           with user or group information and instead controls this via payload.

        Args:
            section_name (str, optional): name of the section.
                                          This name is used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for workspace_template in self._workspace_templates:
            # Read Workspace Type Name from payload:
            if not "type_name" in workspace_template:
                logger.error(
                    "Workspace template needs a type name! Skipping to next workspace template...",
                )
                success = False
                continue
            type_name = workspace_template["type_name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in workspace_template and not workspace_template["enabled"]:
                logger.info(
                    "Payload for Workspace Template -> %s is disabled. Skipping to next workspace template...",
                    type_name,
                )
                continue

            # Read Workspace Template Name from payload:
            if not "template_name" in workspace_template:
                logger.error(
                    "Workspace Template for Workspace Type -> %s needs a template name! Skipping to next workspace template...",
                    type_name,
                )
                success = False
                continue
            template_name = workspace_template["template_name"]

            # Read members from payload:
            if not "members" in workspace_template:
                logger.info(
                    "Workspace template with type -> %s and name -> %s has no members in payload. Skipping to next workspace...",
                    type_name,
                    template_name,
                )
                continue
            members = workspace_template["members"]

            # Find the workspace type with the name given in the _workspace_types
            # datastructure that has been generated by process_workspace_type() method before:
            workspace_type = next(
                (item for item in self._workspace_types if item["name"] == type_name),
                None,
            )
            if workspace_type is None:
                logger.error(
                    "Workspace Type -> %s not found. Skipping to next workspace template...",
                    type_name,
                )
                success = False
                continue
            if workspace_type["templates"] == []:
                logger.error(
                    "Workspace Type -> %s does not have templates. Skipping to next workspace template...",
                    type_name,
                )
                success = False
                continue

            workspace_template = next(
                (
                    item
                    for item in workspace_type["templates"]
                    if item["name"] == template_name
                ),
                None,
            )
            if workspace_template:  # does this template exist?
                logger.info(
                    "Workspace Template -> %s has been specified in payload and it does exist.",
                    template_name,
                )
            else:
                logger.error(
                    "Workspace Template -> %s has been specified in payload but it doesn't exist!",
                    template_name,
                )
                logger.error(
                    "Workspace Type -> %s has only these templates -> %s",
                    type_name,
                    workspace_type["templates"],
                )
                success = False
                continue

            template_id = workspace_template["id"]

            workspace_roles = self._otcs.get_workspace_roles(template_id)
            if workspace_roles is None:
                logger.info(
                    "Workspace Template %s with node Id -> %s has no roles. Skipping to next workspace...",
                    template_name,
                    template_id,
                )
                continue

            for member in members:
                # read user list and role name from payload:
                member_users = (
                    member["users"] if member.get("users") else []
                )  # be careful to avoid key errors as users are optional
                member_groups = (
                    member["groups"] if member.get("groups") else []
                )  # be careful to avoid key errors as groups are optional
                member_role_name = member["role"]

                if member_role_name == "":  # role name is required
                    logger.error(
                        "Members of workspace template -> %s is missing the role name.",
                        template_name,
                    )
                    success = False
                    continue
                if (
                    member_users == [] and member_groups == []
                ):  # we either need users or groups (or both)
                    logger.warning(
                        "Role -> %s of workspace template -> %s does not have any members (no users nor groups).",
                        member_role_name,
                        template_name,
                    )
                    continue

                role_id = self._otcs.lookup_result_value(
                    workspace_roles, "name", member_role_name, "id"
                )
                if role_id is None:
                    #    if member_role is None:
                    logger.error(
                        "Workspace template -> %s does not have a role with name -> %s",
                        template_name,
                        member_role_name,
                    )
                    success = False
                    continue
                logger.info("Role -> %s has ID -> %s", member_role_name, role_id)

                # Process users as workspace template members:
                for member_user in member_users:
                    # find member user in current payload:
                    member_user_id = next(
                        (item for item in self._users if item["name"] == member_user),
                        {},
                    )
                    if member_user_id:
                        user_id = member_user_id["id"]
                    else:
                        # If this didn't work, try to get the member user from OTCS. This covers
                        # cases where the user is system generated or part
                        # of a former payload processing (thus not in the current payload):
                        logger.info(
                            "Member -> %s not found in current payload - check if it exists in OTCS already...",
                            member_user,
                        )
                        response = self._otcs.get_user(member_user)
                        user_id = self._otcs.lookup_result_value(
                            response, key="name", value=member_user, return_key="id"
                        )
                        if not user_id:
                            logger.error(
                                "Cannot find member user with login -> %s. Skipping...",
                                member_user,
                            )
                            success = False
                            continue

                    # Add member if it does not yet exists - suppress warning
                    # message if user is already in role:
                    response = self._otcs.add_member_to_workspace(
                        template_id, int(role_id), user_id, False
                    )
                    if response is None:
                        logger.error(
                            "Failed to add user -> %s (%s) to role -> %s of workspace template -> %s",
                            member_user,
                            user_id,
                            member_role_name,
                            template_name,
                        )
                        success = False
                    else:
                        logger.info(
                            "Successfully added user -> %s (%s) to role -> %s of workspace template -> %s",
                            member_user,
                            user_id,
                            member_role_name,
                            template_name,
                        )

                # Process groups as workspace template members:
                for member_group in member_groups:
                    member_group_id = next(
                        (item for item in self._groups if item["name"] == member_group),
                        None,
                    )
                    if member_group_id is None:
                        logger.error("Cannot find group with name -> %s", member_group)
                        success = False
                        continue
                    group_id = member_group_id["id"]

                    response = self._otcs.add_member_to_workspace(
                        template_id, int(role_id), group_id
                    )
                    if response is None:
                        logger.error(
                            "Failed to add group -> %s (%s) to role -> %s of workspace template -> %s",
                            member_group_id["name"],
                            group_id,
                            member_role_name,
                            template_name,
                        )
                        success = False
                    else:
                        logger.info(
                            "Successfully added group -> %s (%s) to role -> %s of workspace template -> %s",
                            member_group_id["name"],
                            group_id,
                            member_role_name,
                            template_name,
                        )

        self.write_status_file(success, section_name, self._workspace_types)

        return success

        # end method definition

    def process_workspaces(self, section_name: str = "workspaces") -> bool:
        """Process workspaces in payload and create them in Extended ECM.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "workspacesPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise

        Side Effects:
            Set workspace["nodeId] to the node ID of the created workspace
        """

        if not self._workspaces:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for workspace in self._workspaces:
            # Read name from payload:
            if not "name" in workspace:
                logger.error("Workspace needs a name! Skipping to next workspace...")
                success = False
                continue
            name = workspace["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in workspace and not workspace["enabled"]:
                logger.info(
                    "Payload for Workspace -> %s is disabled. Skipping...", name
                )
                continue

            # Read Type Name from payload:
            if not "type_name" in workspace:
                logger.error(
                    "Workspace -> %s needs a type name! Skipping to next workspace...",
                    name,
                )
                success = False
                continue
            type_name = workspace["type_name"]

            # check if the workspace has been created before (effort to make the customizing code idem-potent)
            logger.info(
                "Check if workspace -> %s of type -> %s does already exist...",
                name,
                type_name,
            )
            # Check if workspace does already exist
            # In case the workspace exists, determine_workspace_id()
            # also stores the node ID into workspace["nodeId"]
            workspace_id = self.determine_workspace_id(workspace)
            if workspace_id:
                logger.info(
                    "Workspace -> %s of type -> %s does already exist and has ID -> %s! Skipping to next workspace...",
                    name,
                    type_name,
                    workspace_id,
                )
                continue

            logger.info(
                "Creating new Workspace -> %s; Workspace Type -> %s...", name, type_name
            )

            # Read optional description from payload:
            if not "description" in workspace:
                description = ""
            else:
                description = workspace["description"]

            # Parent ID is optional and only required if workspace type does not specify a create location.
            # This is typically the case if it is a nested workspace or workspaces of the same type can be created
            # in different locations in the Enterprise Workspace:
            parent_id = workspace["parent_id"] if workspace.get("parent_id") else None

            if parent_id is not None:
                parent_workspace = next(
                    (item for item in self._workspaces if item["id"] == parent_id), None
                )
                if parent_workspace is None:
                    logger.error(
                        "Parent Workspace with logical ID -> %s not found.", parent_id
                    )
                    success = False
                    continue

                parent_workspace_node_id = self.determine_workspace_id(parent_workspace)
                if not parent_workspace_node_id:
                    logger.warning(
                        "Parent Workspace without node ID (parent workspace creation may have failed). Skipping to next workspace..."
                    )
                    success = False
                    continue

                logger.info(
                    "Parent Workspace with logical ID -> %s has node ID -> %s",
                    parent_id,
                    parent_workspace_node_id,
                )
            else:
                # if no parent_id is specified the workspace location is determined by the workspace type definition
                # and we pass None as parent ID to the get_workspace_create_form and create_workspace methods below:
                parent_workspace_node_id = None

            # Find the workspace type with the name given in the payload:
            workspace_type = next(
                (item for item in self._workspace_types if item["name"] == type_name),
                None,
            )
            if workspace_type is None:
                logger.error(
                    "Workspace Type -> %s not found. Skipping to next workspace...",
                    type_name,
                )
                success = False
                continue
            if workspace_type["templates"] == []:
                logger.error(
                    "Workspace Type -> %s does not have templates. Skipping to next workspace...",
                    type_name,
                )
                success = False
                continue

            # check if the template to be used is specified in the payload:
            if "template_name" in workspace:
                template_name = workspace["template_name"]
                workspace_template = next(
                    (
                        item
                        for item in workspace_type["templates"]
                        if item["name"] == template_name
                    ),
                    None,
                )
                if workspace_template:  # does this template exist?
                    logger.info(
                        "Workspace Template -> %s has been specified in payload and it does exist.",
                        template_name,
                    )
                else:
                    logger.error(
                        "Workspace Template -> %s has been specified in payload but it doesn't exist!",
                        template_name,
                    )
                    logger.error(
                        "Workspace Type -> %s has only these templates -> %s",
                        type_name,
                        workspace_type["templates"],
                    )
                    success = False
                    continue
            # template to be used is NOT specified in the payload - then we just take the first one:
            else:
                workspace_template = workspace_type["templates"][0]
                logger.info(
                    "Workspace Template has not been specified in payload - we just take the first one (%s)",
                    workspace_template,
                )

            template_id = workspace_template["id"]
            template_name = workspace_template["name"]
            workspace_type_id = workspace_type["id"]

            logger.info(
                "Create Workspace -> %s (type -> %s) from workspace template -> %s (ID -> %s)",
                name,
                type_name,
                template_name,
                template_id,
            )

            # Read business object data from workspace payload:
            ext_system_id = None
            bo_type = None
            bo_id = None
            # Check if business objects are in workspace payload and list is not empty:
            if "business_objects" in workspace and workspace["business_objects"]:
                # Currently we can only process one business object (workspaces connected to multiple leading systems are not support yet)
                business_object_data = workspace["business_objects"][0]
                # business_object_data is a dict with 3 elements:
                if "external_system" in business_object_data:
                    ext_system_id = business_object_data["external_system"]
                if "bo_type" in business_object_data:
                    bo_type = business_object_data["bo_type"]
                if "bo_id" in business_object_data:
                    bo_id = business_object_data["bo_id"]
                logger.info(
                    "Workspace -> %s has business object information -> (%s, %s, %s)",
                    name,
                    ext_system_id,
                    bo_type,
                    bo_id,
                )

                # Check if external system has been declared in payload:
                external_system = next(
                    (
                        item
                        for item in self._external_systems
                        if (item["external_system_name"] == ext_system_id)
                    ),
                    None,
                )
                if not external_system:
                    logger.warning(
                        "External System -> %s does not exist. Cannot connect workspace -> %s to -> %s. Create workspace without connection.",
                        ext_system_id,
                        name,
                        ext_system_id,
                    )
                    # we remove the Business Object information to avoid communication
                    # errors during workspace create form and workspace creation
                    ext_system_id = None
                    bo_type = None
                    bo_id = None
                elif not external_system.get("reachable"):
                    logger.warning(
                        "External System -> %s is not reachable. Cannot connect workspace -> %s to -> (%s, %s, %s). Create workspace without connection...",
                        ext_system_id,
                        name,
                        ext_system_id,
                        bo_type,
                        bo_id,
                    )
                    # we remove the Business Object information to avoid communication
                    # errors during workspace create form and workspace creation
                    ext_system_id = None
                    bo_type = None
                    bo_id = None
                else:
                    logger.info(
                        "Workspace -> %s will be connected with external system -> %s (%s, %s)",
                        name,
                        ext_system_id,
                        bo_type,
                        bo_id,
                    )

            # Read categories from payload:
            if not "categories" in workspace:
                logger.info(
                    "Workspace payload has no category data! Will leave category attributes empty..."
                )
                category_create_data = {}
            else:
                categories = workspace["categories"]
                category_create_data = {"categories": {}}

                response = self._otcs.get_workspace_create_form(
                    template_id, ext_system_id, bo_type, bo_id, parent_workspace_node_id
                )
                if response is None:
                    logger.error(
                        "Failed to retrieve create information for template -> %s",
                        template_id,
                    )
                    success = False
                    continue

                logger.info(
                    "Successfully retrieved create information for template -> %s",
                    template_id,
                )

                # Process category information
                forms = response["forms"]

                categories_form = {}

                # Typically the the create workspace form delivers 3 forms:
                # 1. Form for System Attributes (has no role name)
                # 2. Form for Category Data (role name = "categories")
                # 3. Form for Classifications (role name = "classifications")
                # First we extract these 3 forms:
                for form in forms:
                    if "role_name" in form and form["role_name"] == "categories":
                        categories_form = form
                        logger.debug("Found Categories form -> %s", form)
                        continue
                    if "role_name" in form and form["role_name"] == "classifications":
                        logger.debug("Found Classification form -> %s", form)
                        continue
                    # the remaining option is that this form is the system attributes form:
                    logger.debug("Found System Attributes form -> %s", form)

                # We are just interested in the single category data set (role_name = "categories"):
                data = categories_form["data"]
                logger.debug("Categories data found -> %s", data)
                schema = categories_form["schema"]["properties"]
                logger.debug("Categories schema found -> %s", schema)
                # parallel loop over category data and schema
                for cat_data, cat_schema in zip(data, schema):
                    logger.info("Category ID -> %s", cat_data)
                    data_attributes = data[cat_data]
                    logger.debug("Data Attributes -> %s", data_attributes)
                    schema_attributes = schema[cat_schema]["properties"]
                    logger.debug("Schema Attributes -> %s", schema_attributes)
                    cat_name = schema[cat_schema]["title"]
                    logger.info("Category name -> %s", cat_name)
                    # parallel loop over attribute data and schema
                    # Sets with one (fixed) row have type = object
                    # Multi-value Sets with (multiple) rows have type = array and "properties" in "items" schema
                    # Multi-value attributes have also type = array but NO "properties" in "items" schema
                    for attr_data, attr_schema in zip(
                        data_attributes, schema_attributes
                    ):
                        logger.debug("Attribute ID -> %s", attr_data)
                        logger.debug("Attribute Data -> %s", data_attributes[attr_data])
                        logger.debug(
                            "Attribute Schema -> %s", schema_attributes[attr_schema]
                        )
                        attr_type = schema_attributes[attr_schema]["type"]
                        logger.debug("Attribute Type -> %s", attr_type)
                        if not "title" in schema_attributes[attr_schema]:
                            logger.debug("Attribute has no title. Skipping...")
                            continue
                        # Check if it is an multi-line set:
                        if attr_type == "array" and (
                            "properties" in schema_attributes[attr_schema]["items"]
                        ):
                            set_name = schema_attributes[attr_schema]["title"]
                            logger.info("Multi-line Set -> %s", set_name)
                            set_data_attributes = data_attributes[
                                attr_data
                            ]  # this is a list []
                            logger.debug(
                                "Set Data Attributes -> %s", set_data_attributes
                            )
                            set_schema_attributes = schema_attributes[attr_schema][
                                "items"
                            ]["properties"]
                            logger.debug(
                                "Set Schema Attributes -> %s", set_schema_attributes
                            )
                            set_schema_max_rows = schema_attributes[attr_schema][
                                "items"
                            ]["maxItems"]
                            logger.debug(
                                "Set Schema Max Rows -> %s", set_schema_max_rows
                            )
                            set_data_max_rows = len(set_data_attributes)
                            logger.debug("Set Data Max Rows -> %s", set_data_max_rows)
                            row = 1
                            # it can happen that the payload contains more rows than the
                            # initial rows in the set data structure. In this case we use
                            # a copy of the data structure from row 0 as template...
                            first_row = dict(set_data_attributes[0])
                            # We don't know upfront how many rows of data we will find in payload
                            # but we at max process the maxItems specified in the schema:
                            while row <= set_schema_max_rows:
                                # Test if we have any payload for this row:
                                attribute = next(
                                    (
                                        item
                                        for item in categories
                                        if (
                                            item["name"] == cat_name
                                            and "set"
                                            in item  # not all items may have a "set" key
                                            and item["set"] == set_name
                                            and "row"
                                            in item  # not all items may have a "row" key
                                            and item["row"] == row
                                        )
                                    ),
                                    None,
                                )
                                # stop if there's no payload for the row:
                                if attribute is None:
                                    logger.info(
                                        "No payload found for set -> %s, row -> %s",
                                        set_name,
                                        row,
                                    )
                                    # we assume that if there's no payload for row n there will be no payload for rows > n
                                    # and break the while loop:
                                    break
                                # do we need to create a new row in the data set?
                                elif row > set_data_max_rows:
                                    # use the row we stored above to create a new empty row:
                                    logger.info(
                                        "Found payload for row -> %s, we need a new data row for it",
                                        row,
                                    )
                                    logger.info(
                                        "Adding an additional row -> %s to set data -> %s",
                                        row,
                                        set_name,
                                    )
                                    # add the empty dict to the list:
                                    set_data_attributes.append(dict(first_row))
                                    set_data_max_rows += 1
                                else:
                                    logger.info(
                                        "Found payload for row -> %s %s we can store in existing data row",
                                        row,
                                        set_name,
                                    )
                                # traverse all attributes in a single row:
                                for set_attr_schema in set_schema_attributes:
                                    logger.debug(
                                        "Set Attribute ID -> %s (row -> %s)",
                                        set_attr_schema,
                                        row,
                                    )
                                    logger.debug(
                                        "Set Attribute Schema -> %s (row -> %s)",
                                        set_schema_attributes[set_attr_schema],
                                        row,
                                    )
                                    set_attr_type = set_schema_attributes[
                                        set_attr_schema
                                    ]["type"]
                                    logger.debug(
                                        "Set Attribute Type -> %s (row -> %s)",
                                        set_attr_type,
                                        row,
                                    )
                                    set_attr_name = set_schema_attributes[
                                        set_attr_schema
                                    ]["title"]
                                    logger.debug(
                                        "Set Attribute Name -> %s (row -> %s)",
                                        set_attr_name,
                                        row,
                                    )
                                    # Lookup the attribute with the right category, set, attribute name, and row number in payload:
                                    attribute = next(
                                        (
                                            item
                                            for item in categories
                                            if (
                                                item["name"] == cat_name
                                                and "set"
                                                in item  # not all items may have a "set" key
                                                and item["set"] == set_name
                                                and item["attribute"] == set_attr_name
                                                and "row"
                                                in item  # not all items may have a "row" key
                                                and item["row"] == row
                                            )
                                        ),
                                        None,
                                    )
                                    if attribute is None:
                                        logger.warning(
                                            "Set -> %s, Attribute -> %s, Row -> %s not found in payload.",
                                            set_name,
                                            set_attr_name,
                                            row,
                                        )

                                        # need to use row - 1 as index starts with 0 but payload rows start with 1
                                        set_data_attributes[row - 1][
                                            set_attr_schema
                                        ] = ""
                                    else:
                                        logger.info(
                                            "Set -> %s, Attribute -> %s, Row -> %s found in payload, value -> %s",
                                            set_name,
                                            set_attr_name,
                                            row,
                                            attribute["value"],
                                        )
                                        # Put the value from the payload into data structure
                                        # need to use row - 1 as index starts with 0 but payload rows start with 1
                                        set_data_attributes[row - 1][
                                            set_attr_schema
                                        ] = attribute["value"]
                                row += 1  # continue the while loop with the next row
                        # Check if it is single-line set:
                        elif attr_type == "object":
                            set_name = schema_attributes[attr_schema]["title"]
                            logger.info("Single-line Set -> %s", set_name)
                            set_data_attributes = data_attributes[attr_data]
                            logger.debug(
                                "Set Data Attributes -> %s", set_data_attributes
                            )

                            set_schema_attributes = schema_attributes[attr_schema][
                                "properties"
                            ]
                            logger.debug(
                                "Set Schema Attributes -> %s", set_schema_attributes
                            )
                            for set_attr_data, set_attr_schema in zip(
                                set_data_attributes, set_schema_attributes
                            ):
                                logger.debug("Set Attribute ID -> %s", set_attr_data)
                                logger.debug(
                                    "Set Attribute Data -> %s",
                                    set_data_attributes[set_attr_data],
                                )
                                logger.debug(
                                    "Set Attribute Schema -> %s",
                                    set_schema_attributes[set_attr_schema],
                                )
                                set_attr_type = set_schema_attributes[set_attr_schema][
                                    "type"
                                ]
                                logger.debug("Set Attribute Type -> %s", set_attr_type)
                                set_attr_name = set_schema_attributes[set_attr_schema][
                                    "title"
                                ]
                                logger.debug("Set Attribute Name -> %s", set_attr_name)
                                # Lookup the attribute with the right category, set and attribute name in payload:
                                attribute = next(
                                    (
                                        item
                                        for item in categories
                                        if (
                                            item["name"] == cat_name
                                            and "set"
                                            in item  # not all items may have a "set" key
                                            and item["set"] == set_name
                                            and item["attribute"] == set_attr_name
                                        )
                                    ),
                                    None,
                                )
                                if attribute is None:
                                    logger.warning(
                                        "Set -> %s, Attribute -> %s not found in payload.",
                                        set_name,
                                        set_attr_name,
                                    )
                                    set_data_attributes[set_attr_data] = ""
                                else:
                                    logger.info(
                                        "Set -> %s, Attribute -> %s found in payload, value -> %s",
                                        set_name,
                                        set_attr_name,
                                        attribute["value"],
                                    )
                                    # Put the value from the payload into data structure
                                    set_data_attributes[set_attr_data] = attribute[
                                        "value"
                                    ]
                        # It is a plain attribute (not inside a set) or it is a multi-value attribute (not inside a set):
                        else:
                            attr_name = schema_attributes[attr_schema]["title"]
                            logger.debug("Attribute Name -> %s", attr_name)
                            # Lookup the attribute with the right category and attribute name in payload:
                            attribute = next(
                                (
                                    item
                                    for item in categories
                                    if (
                                        item["name"] == cat_name
                                        and item["attribute"] == attr_name
                                    )
                                ),
                                None,
                            )
                            if attribute is None:
                                logger.warning(
                                    "Attribute -> %s not found in payload.", attr_name
                                )
                                data_attributes[attr_data] = ""
                            else:
                                logger.info(
                                    "Attribute -> %s found in payload, value -> %s",
                                    attr_name,
                                    attribute["value"],
                                )
                                # We need to handle a very special case here for Extended ECM for Government
                                # which has an attribute type "Organizational Unit" (OU). This is referring to a group ID
                                # which is not stable across deployments. So we need to lookup the Group ID and add it
                                # to the data structure. This expects that the payload has the Group Name and not the Group ID
                                if attr_type == str(11480):
                                    logger.info(
                                        "Attribute -> %s is is of type -> Organizational Unit (%s). Looking up group ID for group name -> %s",
                                        attr_name,
                                        attr_type,
                                        attribute["value"],
                                    )
                                    group = self._otcs.get_group(attribute["value"])
                                    group_id = self._otcs.lookup_result_value(
                                        group, "name", attribute["value"], "id"
                                    )

                                    if group_id:
                                        logger.info(
                                            "Group for Organizational Unit -> %s has ID -> %s",
                                            attribute["value"],
                                            group_id,
                                        )
                                        # Put the group ID into data structure
                                        data_attributes[attr_data] = str(group_id)
                                    else:
                                        logger.error(
                                            "Group for Organizational Unit -> %s does not exist!",
                                            attribute["value"],
                                        )
                                        # Clear the value to avoid workspace create failure
                                        data_attributes[attr_data] = ""
                                # handle special case where attribute type is a user picker.
                                # we expect that the payload includes the login name for this
                                # (as user IDs are not stable across systems) but then we need
                                # to lookup the real user ID here:
                                elif attr_type == "otcs_user_picker":
                                    logger.info(
                                        "Attribute -> %s is is of type -> User Picker (%s). Looking up user ID for user login name -> %s",
                                        attr_name,
                                        attr_type,
                                        attribute["value"],
                                    )
                                    user = self._otcs.get_user(attribute["value"])
                                    user_id = self._otcs.lookup_result_value(
                                        response=user,
                                        key="name",
                                        value=attribute["value"],
                                        return_key="id",
                                    )
                                    if user_id:
                                        # User has been found - determine ID:
                                        logger.info(
                                            "User -> %s has ID -> %s",
                                            attribute["value"],
                                            user_id,
                                        )
                                        # Put the user ID into data structure
                                        data_attributes[attr_data] = str(user_id)
                                    else:
                                        logger.error(
                                            "User with login name -> %s does not exist!",
                                            attribute["value"],
                                        )
                                        # Clear the value to avoid workspace create failure
                                        data_attributes[attr_data] = ""
                                else:
                                    # Put the value from the payload into data structure
                                    data_attributes[attr_data] = attribute["value"]
                    category_create_data["categories"][cat_data] = data_attributes

            logger.debug("Category Create Data -> %s", category_create_data)

            # Create the workspace with all provided information:
            response = self._otcs.create_workspace(
                template_id,
                name,
                description,
                workspace_type_id,
                category_create_data,
                ext_system_id,
                bo_type,
                bo_id,
                parent_workspace_node_id,
            )
            if response is None:
                logger.error("Failed to create workspace -> %s", name)
                success = False
                continue

            # Now we add the node ID of the new workspace to the payload data structure
            # This will be reused when creating the workspace relationships!
            workspace["nodeId"] = self._otcs.get_result_value(response, "id")

            # We also get the name the workspace was finally created with.
            # This can be different form the name in the payload as additional
            # naming conventions from the Workspace Type definitions may apply.
            # This is important to make the python container idem-potent.
            response = self._otcs.get_workspace(workspace["nodeId"])
            workspace["name"] = self._otcs.get_result_value(response, "name")

            logger.info(
                "Successfully created workspace with final name -> %s and node ID -> %s",
                workspace["name"],
                workspace["nodeId"],
            )

            # Check if there's an workspace icon/image configured:
            if "image_nickname" in workspace:
                image_nickname = workspace["image_nickname"]

                response = self._otcs.get_node_from_nickname(image_nickname)
                node_id = self._otcs.get_result_value(response, "id")
                if node_id:
                    mime_type = self._otcs.get_result_value(response, "mime_type")
                    if not mime_type:
                        logger.warning(
                            "Missing mime type information - assuming image/png"
                        )
                        mime_type = "image/png"
                    file_path = "/tmp/" + image_nickname
                    self._otcs.download_document(node_id=node_id, file_path=file_path)
                    response = self._otcs.update_workspace_icon(
                        workspace_id=workspace["nodeId"],
                        file_path=file_path,
                        file_mimetype=mime_type,
                    )
                    if not response:
                        logger.error(
                            "Failed to assign icon -> %s to workspace -> %s from file -> %s ",
                            image_nickname,
                            name,
                            file_path,
                        )
                else:
                    logger.error(
                        "Cannot find workspace image with nickname -> %s for workspace -> %s",
                        image_nickname,
                        name,
                    )

            # Check if an RM classification is specified for the workspace:
            # RM Classification is specified as list of path elements (top-down)
            if (
                "rm_classification_path" in workspace
                and workspace["rm_classification_path"] != []
            ):
                rm_class_node = self._otcs.get_node_by_volume_and_path(
                    198, workspace["rm_classification_path"]
                )
                rm_class_node_id = self._otcs.get_result_value(rm_class_node, "id")
                if rm_class_node_id:
                    response = self._otcs.assign_rm_classification(
                        workspace["nodeId"], rm_class_node_id, False
                    )
                    if response is None:
                        logger.error(
                            "Failed to assign RM classification -> %s (%s) to workspace -> %s",
                            workspace["rm_classification_path"][-1],
                            rm_class_node_id,
                            name,
                        )
                    else:
                        logger.info(
                            "Assigned RM Classification -> %s to workspace -> %s",
                            workspace["rm_classification_path"][-1],
                            name,
                        )
            # Check if one or multiple classifications are specified for the workspace
            # Classifications are specified as list of path elements (top-down)
            if (
                "classification_pathes" in workspace
                and workspace["classification_pathes"] != []
            ):
                for classification_path in workspace["classification_pathes"]:
                    class_node = self._otcs.get_node_by_volume_and_path(
                        198, classification_path
                    )
                    class_node_id = self._otcs.get_result_value(class_node, "id")
                    if class_node_id:
                        response = self._otcs.assign_classification(
                            workspace["nodeId"], [class_node_id], False
                        )
                        if response is None:
                            logger.error(
                                "Failed to assign classification -> %s to workspace -> %s",
                                class_node_id,
                                name,
                            )
                        else:
                            logger.info(
                                "Assigned Classification -> %s to workspace -> %s",
                                classification_path[-1],
                                name,
                            )

        self.write_status_file(success, section_name, self._workspaces)

        return success

        # end method definition

    def process_workspace_relationships(
        self, section_name: str = "workspaceRelationships"
    ) -> bool:
        """Process workspaces relationships in payload and create them in Extended ECM.

        Relationships can only be created if all workspaces have been created before.
        Once a workspace got created, the node ID of that workspaces has been added
        to the payload["workspaces"] data structure (see process_workspaces())
        Relationships are created between the node IDs of two business workspaces
        (and not the logical IDs in the inital payload specification)

        Args:
            section_name (str, optional): name of the section.
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._workspaces:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for workspace in self._workspaces:
            # Read name from payload:
            if not "name" in workspace:
                continue
            name = workspace["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in workspace and not workspace["enabled"]:
                logger.info(
                    "Payload for Workspace -> %s is disabled. Skipping...", name
                )
                continue

            # Read relationships from payload:
            if not "relationships" in workspace:
                logger.info(
                    "Workspace -> %s has no relationships. Skipping to next workspace...",
                    name,
                )
                continue

            # Check that workspaces actually have a logical ID -
            # otherwise we cannot establish the relationship:
            if not "id" in workspace:
                logger.warning(
                    "Workspace without ID cannot have a relationship. Skipping to next workspace..."
                )
                continue

            workspace_id = workspace["id"]
            logger.info("Workspace -> %s has relationships - creating...", name)

            workspace_node_id = self.determine_workspace_id(workspace)
            if not workspace_node_id:
                logger.warning(
                    "Workspace without node ID cannot have a relationship (workspace creation may have failed). Skipping to next workspace..."
                )
                continue
            # now determine the actual node IDs of the workspaces (have been created above):
            logger.info(
                "Workspace with logical ID -> %s has node ID -> %s",
                workspace_id,
                workspace_node_id,
            )

            for related_workspace_id in workspace["relationships"]:
                # Find the workspace type with the name given in the payload:
                related_workspace = next(
                    (
                        item
                        for item in self._workspaces
                        if item["id"] == related_workspace_id
                    ),
                    None,
                )
                if related_workspace is None:
                    logger.error(
                        "Related Workspace with logical ID -> %s not found.",
                        related_workspace_id,
                    )
                    success = False
                    continue

                if "enabled" in related_workspace and not related_workspace["enabled"]:
                    logger.info(
                        "Payload for Related Workspace -> %s is disabled. Skipping...",
                        related_workspace["name"],
                    )
                    continue

                related_workspace_node_id = self.determine_workspace_id(
                    related_workspace
                )
                if not related_workspace_node_id:
                    logger.warning(
                        "Related Workspace without node ID (workspaces creation may have failed). Skipping to next workspace..."
                    )
                    continue

                logger.info(
                    "Related Workspace with logical ID -> %s has node ID -> %s",
                    related_workspace_id,
                    related_workspace_node_id,
                )

                logger.info(
                    "Create Workspace Relationship between workspace node ID -> %s and workspace node ID -> %s",
                    workspace_node_id,
                    related_workspace_node_id,
                )

                # Check if relationship does already exists:
                response = self._otcs.get_workspace_relationships(workspace_node_id)

                existing_workspace_relationship = self._otcs.exist_result_item(
                    response, "id", related_workspace_node_id
                )
                if existing_workspace_relationship:
                    logger.info(
                        "Workspace relationship between workspace ID -> %s and related workspace ID -> %s does already exist. Skipping...",
                        workspace_node_id,
                        related_workspace_node_id,
                    )
                    continue

                response = self._otcs.create_workspace_relationship(
                    workspace_node_id, related_workspace_node_id
                )
                if not response:
                    logger.error("Failed to create workspace relationship.")
                    success = False
                else:
                    logger.info("Successfully created workspace relationship.")

        self.write_status_file(success, section_name, self._workspaces)

        return success

        # end method definition

    def process_workspace_members(self, section_name: str = "workspaceMembers") -> bool:
        """Process workspaces members in payload and create them in Extended ECM.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._workspaces:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for workspace in self._workspaces:
            # Read name from payload (just for logging):
            if not "name" in workspace:
                continue
            workspace_name = workspace["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in workspace and not workspace["enabled"]:
                logger.info(
                    "Payload for Workspace -> %s is disabled. Skipping...",
                    workspace_name,
                )
                continue

            # Read members from payload:
            if not "members" in workspace:
                logger.info(
                    "Workspace -> %s has no members in payload. Skipping to next workspace...",
                    workspace_name,
                )
                continue
            members = workspace["members"]

            workspace_id = workspace["id"]
            logger.info(
                "Workspace -> %s has memberships in payload - establishing...",
                workspace_name,
            )

            workspace_node_id = int(self.determine_workspace_id(workspace))
            if not workspace_node_id:
                logger.warning(
                    "Workspace without node ID cannot have members (workspaces creation may have failed). Skipping to next workspace..."
                )
                continue

            # now determine the actual node IDs of the workspaces (have been created by process_workspaces()):
            workspace_node = self._otcs.get_node(workspace_node_id)
            workspace_owner_id = self._otcs.get_result_value(
                workspace_node, "owner_user_id"
            )
            workspace_owner_name = self._otcs.get_result_value(workspace_node, "owner")

            workspace_roles = self._otcs.get_workspace_roles(workspace_node_id)
            if workspace_roles is None:
                logger.info(
                    "Workspace with ID -> %s and node Id -> %s has no roles. Skipping to next workspace...",
                    workspace_id,
                    workspace_node_id,
                )
                continue

            # We don't want the workspace creator to be in the leader role
            # of automatically created workspaces - this can happen because the
            # creator gets added to the leader role automatically:
            leader_role_id = self._otcs.lookup_result_value(
                workspace_roles, "leader", True, "id"
            )

            if leader_role_id:
                leader_role_name = self._otcs.lookup_result_value(
                    workspace_roles, "leader", True, "name"
                )
                response = self._otcs.remove_member_from_workspace(
                    workspace_node_id, leader_role_id, workspace_owner_id, False
                )
                if response:
                    logger.info(
                        "Removed creator user -> %s (%s) from leader role -> {%s (%s) of workspace -> %s",
                        workspace_owner_name,
                        workspace_owner_id,
                        leader_role_name,
                        leader_role_id,
                        workspace_name,
                    )

            logger.info(
                "Adding members to workspace with ID -> %s and node ID -> %s defined in payload...",
                workspace_id,
                workspace_node_id,
            )

            for member in members:
                # read user list and role name from payload:
                member_users = (
                    member["users"] if member.get("users") else []
                )  # be careful to avoid key errors as users are optional
                member_groups = (
                    member["groups"] if member.get("groups") else []
                )  # be careful to avoid key errors as groups are optional
                member_role_name = member["role"]

                if member_role_name == "":  # role name is required
                    logger.error(
                        "Members of workspace -> %s is missing the role name.",
                        workspace_name,
                    )
                    success = False
                    continue
                if (
                    member_users == [] and member_groups == []
                ):  # we either need users or groups (or both)
                    logger.warning(
                        "Role -> %s of workspace -> %s does not have any members (no users nor groups).",
                        member_role_name,
                        workspace_name,
                    )
                    continue

                role_id = self._otcs.lookup_result_value(
                    workspace_roles, "name", member_role_name, "id"
                )
                if role_id is None:
                    #    if member_role is None:
                    logger.error(
                        "Workspace -> %s does not have a role with name -> %s",
                        workspace_name,
                        member_role_name,
                    )
                    success = False
                    continue
                logger.info("Role -> %s has ID -> %s", member_role_name, role_id)

                # Process users as workspaces members:
                for member_user in member_users:
                    # find member user in current payload:
                    member_user_id = next(
                        (item for item in self._users if item["name"] == member_user),
                        {},
                    )
                    if member_user_id:
                        user_id = member_user_id["id"]
                    else:
                        # If this didn't work, try to get the member user from OTCS. This covers
                        # cases where the user is system generated or part
                        # of a former payload processing (thus not in the current payload):
                        logger.info(
                            "Member -> %s not found in current payload - check if it exists in OTCS already...",
                            member_user,
                        )
                        response = self._otcs.get_user(member_user)
                        user_id = self._otcs.lookup_result_value(
                            response, key="name", value=member_user, return_key="id"
                        )
                        if not user_id:
                            logger.error(
                                "Cannot find member user with login -> %s. Skipping...",
                                member_user,
                            )
                            continue

                    # Add member if it does not yet exists - suppress warning
                    # message if user is already in role:
                    response = self._otcs.add_member_to_workspace(
                        workspace_node_id, int(role_id), user_id, False
                    )
                    if response is None:
                        logger.error(
                            "Failed to add user -> %s (%s) to role -> %s of workspace -> %s",
                            member_user,
                            user_id,
                            member_role_name,
                            workspace_name,
                        )
                        success = False
                    else:
                        logger.info(
                            "Successfully added user -> %s (%s) to role -> %s of workspace -> %s",
                            member_user,  # member_user_id["name"],
                            user_id,
                            member_role_name,
                            workspace_name,
                        )

                # Process groups as workspaces members:
                for member_group in member_groups:
                    member_group_id = next(
                        (item for item in self._groups if item["name"] == member_group),
                        None,
                    )
                    if member_group_id is None:
                        logger.error("Cannot find group with name -> %s", member_group)
                        success = False
                        continue
                    group_id = member_group_id["id"]

                    response = self._otcs.add_member_to_workspace(
                        workspace_node_id, int(role_id), group_id
                    )
                    if response is None:
                        logger.error(
                            "Failed to add group -> %s (%s) to role -> %s of workspace -> %s",
                            member_group_id["name"],
                            group_id,
                            member_role_name,
                            workspace_name,
                        )
                        success = False
                    else:
                        logger.info(
                            "Successfully added group -> %s (%s) to role -> %s of workspace -> %s",
                            member_group_id["name"],
                            group_id,
                            member_role_name,
                            workspace_name,
                        )

                # Optionally the payload may have a permission list for the role
                # to change the default permission from the workspace template
                # to something more specific:
                member_permissions = member.get("permissions", [])
                if member_permissions == []:
                    logger.info(
                        "No permission change for workspace -> %s and role -> %s.",
                        workspace_name,
                        member_role_name,
                    )
                    continue

                logger.info(
                    "Update permissions of workspace -> %s (%s) and role -> %s to -> %s",
                    workspace_name,
                    str(workspace_node_id),
                    member_role_name,
                    str(member_permissions),
                )
                response = self._otcs.assign_permission(
                    node_id=workspace_node_id,
                    assignee_type="custom",
                    assignee=role_id,
                    permissions=member_permissions,
                    apply_to=2,
                )
                if not response:
                    logger.error(
                        "Failed to update permissions of workspace -> %s (%s) and role -> %s to -> %s.",
                        workspace_name,
                        str(workspace_node_id),
                        member_role_name,
                        str(member_permissions),
                    )
                    success = False

        self.write_status_file(success, section_name, self._workspaces)

        return success

        # end method definition

    def process_workspace_aviators(
        self, section_name: str = "workspaceAviators"
    ) -> bool:
        """Process workspaces Content Aviator settings in payload and enable Aviator for selected workspaces.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._workspaces:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for workspace in self._workspaces:
            # Read name from payload (just for logging):
            if not "name" in workspace:
                continue
            workspace_name = workspace["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in workspace and not workspace["enabled"]:
                logger.info(
                    "Payload for Workspace -> %s is disabled. Skipping...",
                    workspace_name,
                )
                continue

            # Read Aviator setting from payload:
            if not "enable_aviator" in workspace or not workspace["enable_aviator"]:
                logger.info(
                    "Aviator is not enabled for Workspace -> %s. Skipping to next workspace...",
                    workspace_name,
                )
                continue

            # We cannot just lookup with workspace.get("nodeId") as the customizer
            # may have been restarted inbetween - so we use our proper determine_workspace_id
            # here...
            workspace_id = self.determine_workspace_id(workspace)
            if not workspace_id:
                logger.error(
                    "Cannot find node ID for workspace -> %s. Workspace creation may have failed. Skipping to next workspace...",
                    workspace_name,
                )
                success = False
                continue

            # Make code idem-potent and check if Aviator is already enabled
            # for this workspace:
            if self._otcs.check_workspace_aviator(workspace_id=workspace_id):
                logger.info(
                    "Skip workspace -> %s (%s) as Aviator is already enabled...",
                    workspace_name,
                    workspace_id,
                )
                continue

            # Now enable the Content Aviator for the workspace:
            response = self._otcs.update_workspace_aviator(workspace_id, True)
            if not response:
                logger.error(
                    "Failed to enable Content Aviator for workspace -> %s (%s)",
                    workspace_name,
                    workspace_id,
                )
                success = False
                continue

        self.write_status_file(success, section_name, self._workspaces)

        return success

        # end method definition

    def process_web_reports(
        self, web_reports: list, section_name: str = "webReports"
    ) -> bool:
        """Process web reports in payload and run them in Extended ECM.

        Args:
            web_reports (list): list of web reports. As we have two different list (pre and post)
                                we need to pass the actual list as parameter.
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "webReportsPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not web_reports:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for web_report in web_reports:
            nick_name = web_report["nickname"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in web_report and not web_report["enabled"]:
                logger.info(
                    "Payload for Web Report -> %s is disabled. Skipping...", nick_name
                )
                continue

            description = web_report["description"]

            if not self._otcs.get_node_from_nickname(nick_name):
                logger.error(
                    "Web Report with nickname -> %s does not exist! Skipping...",
                    nick_name,
                )
                success = False
                continue

            # be careful to avoid key errors as Web Report parameters are optional:
            actual_params = (
                web_report["parameters"] if web_report.get("parameters") else {}
            )
            formal_params = self._otcs.get_web_report_parameters(nick_name)
            if actual_params:
                logger.info(
                    "Running Web Report -> %s (%s) with parameters -> %s ...",
                    nick_name,
                    description,
                    actual_params,
                )
                # Do some sanity checks to see if the formal and actual parameters are matching...
                # Check 1: are there formal parameters at all?
                if not formal_params:
                    logger.error(
                        "Web Report -> %s is called with actual parameters but it does not expect parameters! Skipping...",
                        nick_name,
                    )
                    success = False
                    continue
                lets_continue = False
                # Check 2: Iterate through the actual parameters given in the payload
                # and see if there's a matching formal parameter expected by the Web Report:
                for key, value in actual_params.items():
                    # Check if there's a matching formal parameter defined on the Web Report node:
                    formal_param = next(
                        (item for item in formal_params if item["parm_name"] == key),
                        None,
                    )
                    if formal_param is None:
                        logger.error(
                            "Web Report -> %s is called with parameter -> %s that is not expected! Value: %s) Skipping...",
                            nick_name,
                            key,
                            value,
                        )
                        success = False
                        lets_continue = True  # we cannot do a "continue" here directly as we are in an inner loop
                # Check 3: Iterate through the formal parameters and validate there's a matching
                # actual parameter defined in the payload for each mandatory formal parameter
                # that does not have a default value:
                for formal_param in formal_params:
                    if (
                        (formal_param["mandatory"] is True)
                        and (formal_param["default_value"] is None)
                        and not actual_params.get(formal_param["parm_name"])
                    ):
                        logger.error(
                            "Web Report -> %s is called without mandatory parameter -> %s! Skipping...",
                            nick_name,
                            formal_param["parm_name"],
                        )
                        success = False
                        lets_continue = True  # we cannot do a "continue" here directly as we are in an inner loop
                # Did any of the checks fail?
                if lets_continue:
                    continue
                # Actual parameters are validated, we can run the Web Report:
                response = self._otcs.run_web_report(nick_name, actual_params)
            else:
                logger.info(
                    "Running Web Report -> %s (%s) without parameters...",
                    nick_name,
                    description,
                )
                # Check if there's a formal parameter that is mandatory but
                # does not have a default value:
                if formal_params:
                    required_param = next(
                        (
                            item
                            for item in formal_params
                            if (item["mandatory"] is True)
                            and (not item["default_value"])
                        ),
                        None,
                    )
                    if required_param:
                        logger.error(
                            "Web Report -> %s is called without parameters but has a mandatory parameter -> %s without a default value! Skipping...",
                            nick_name,
                            required_param["parm_name"],
                        )
                        success = False
                        continue
                    else:  # we are good to proceed!
                        logger.debug(
                            "Web Report -> %s does not have a mandatory parameter without a default value!",
                            nick_name,
                        )
                response = self._otcs.run_web_report(nick_name)
            if response is None:
                logger.error("Failed to run web report -> %s", nick_name)
                success = False

        self.write_status_file(success, section_name, web_reports)

        return success

        # end method definition

    def process_cs_applications(
        self, otcs_object: OTCS, section_name: str = "csApplications"
    ) -> bool:
        """Process CS applications in payload and install them in Extended ECM.
        The CS Applications need to be installed in all frontend and backends.

        Args:
            otcs_object (object): this can either be the OTCS frontend or OTCS backend. If None
                                  then the otcs_backend is used.
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._cs_applications:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # OTCS backend is the default:
        if not otcs_object:
            otcs_object = self._otcs_backend

        for cs_application in self._cs_applications:
            application_name = cs_application["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in cs_application and not cs_application["enabled"]:
                logger.info(
                    "Payload for CS Application -> %s is disabled. Skipping...",
                    application_name,
                )
                continue

            application_description = cs_application["description"]

            logger.info(
                "Install CS Application -> %s (%s)...",
                application_name,
                application_description,
            )
            response = otcs_object.install_cs_application(application_name)
            if response is None:
                logger.error(
                    "Failed to install CS Application -> %s!", application_name
                )
                success = False

        self.write_status_file(success, section_name, self._cs_applications)

        return success

        # end method definition

    def process_user_settings(self, section_name: str = "userSettings") -> bool:
        """Process user settings in payload and apply themin OTDS.
           This includes password settings and user display settings.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for user in self._users:
            user_name = user["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue

            user_partition = self._otcs.config()["partition"]
            if not user_partition:
                logger.error("User partition not found!")
                success = False
                continue

            # Set the OTDS display name. Extended ECM does not use this but
            # it makes AppWorks display users correctly (and it doesn't hurt)
            # We only set this if firstname _and_ last name are in the payload:
            if "firstname" in user and "lastname" in user:
                user_display_name = user["firstname"] + " " + user["lastname"]
                response = self._otds.update_user(
                    user_partition, user_name, "displayName", user_display_name
                )
                if response:
                    logger.info(
                        "Display name for user -> %s has been updated to -> %s",
                        user_name,
                        user_display_name,
                    )
                else:
                    logger.error(
                        "Display name for user -> %s could not be updated to -> %s",
                        user_name,
                        user_display_name,
                    )
                    success = False

            # Don't enforce the user to reset password at first login (settings in OTDS):
            logger.info("Don't enforce password change for user -> %s...", user_name)
            response = self._otds.update_user(
                user_partition, user_name, "UserMustChangePasswordAtNextSignIn", "False"
            )
            if not response:
                success = False

            response = self._otds.update_user(
                user_partition, user_name, "UserCannotChangePassword", "True"
            )
            if not response:
                success = False

            # Set user password to never expire
            response = self._otds.update_user(
                user_partition, user_name, "PasswordNeverExpires", "True"
            )
            if not response:
                success = False

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_user_favorites_and_profiles(
        self, section_name: str = "userFavoritesAndProfiles"
    ) -> bool:
        """Process user favorites in payload and create them in Extended ECM.
           This method also simulates browsing the favorites to populate the
           widgets on the landing pages and sets personal preferences.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # We can only set favorites if we impersonate / authenticate as the user.
        # The following code (for loop) will change the authenticated user - we need to
        # switch it back to admin user later so we safe the admin credentials for this:

        if self._users:
            # save admin credentials for later switch back to admin user:
            admin_credentials = self._otcs.credentials()
        else:
            admin_credentials = {}

        for user in self._users:
            user_name = user["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue

            user_password = user["password"]

            # we change the otcs credentials to the user:
            self._otcs.set_credentials(user_name, user_password)

            # we re-authenticate as the user:
            logger.info("Authenticate user -> %s...", user_name)
            # True = force new login with new user
            cookie = self._otcs.authenticate(
                revalidate=True, force_user_password_login=True
            )
            if not cookie:
                logger.error("Couldn't authenticate user -> %s", user_name)
                success = False
                continue

            # we update the user profile to activate responsive (dynamic) containers:
            response = self._otcs.update_user_profile(
                field="responsiveContainerMode",
                value=True,
                config_section="SmartUI",
            )
            if response is None:
                logger.warning(
                    "Profile for user -> %s couldn't be updated with responsive container mode'!",
                    user_name,
                )
            else:
                logger.info(
                    "Profile for user -> %s has been updated to enable responsive container mode.",
                    user_name,
                )
            response = self._otcs.update_user_profile(
                field="responsiveContainerMessageMode",
                value=True,
                config_section="SmartUI",
            )
            if response is None:
                logger.warning(
                    "Profile for user -> %s couldn't be updated with responsive container message mode'!",
                    user_name,
                )
            else:
                logger.info(
                    "Profile for user -> %s has been updated to enable messages for responsive container mode.",
                    user_name,
                )

            # we work through the list of favorites defined for the user:
            favorites = user["favorites"]
            for favorite in favorites:
                # check if favorite is a logical workspace name
                favorite_item = next(
                    (item for item in self._workspaces if item["id"] == favorite), None
                )
                is_workspace = False
                if favorite_item:
                    logger.info(
                        "Found favorite item (workspace) in payload -> %s",
                        favorite_item["name"],
                    )
                    favorite_id = self.determine_workspace_id(favorite_item)
                    if not favorite_id:
                        logger.warning(
                            "Workspace of type -> %s and name -> %s does not exist. Cannot create favorite. Skipping...",
                            favorite_item["type_name"],
                            favorite_item["name"],
                        )
                        continue

                    is_workspace = True
                else:
                    # alternatively try to find the item as a nickname:
                    favorite_item = self._otcs.get_node_from_nickname(favorite)
                    favorite_id = self._otcs.get_result_value(favorite_item, "id")
                    #                    if favorite_item is None:
                    if favorite_id is None:
                        logger.warning(
                            "Favorite -> %s neither found as workspace ID nor as nickname. Skipping to next favorite...",
                            favorite,
                        )
                        continue

                response = self._otcs.add_favorite(favorite_id)
                if response is None:
                    logger.warning(
                        "Favorite ID -> %s couldn't be added for user -> %s!",
                        favorite_id,
                        user_name,
                    )
                else:
                    logger.info(
                        "Added favorite for user -> %s, node ID -> %s.",
                        user_name,
                        favorite_id,
                    )
                    logger.info(
                        "Simulate user -> %s browsing node ID -> %s.",
                        user_name,
                        favorite_id,
                    )
                    # simulate a browse by the user to populate recently accessed items
                    if is_workspace:
                        response = self._otcs.get_workspace(favorite_id)
                    else:
                        response = self._otcs.get_node(favorite_id)

            # we work through the list of proxies defined for the user
            # (we need to consider that not all users have the proxies element):
            proxies = user["proxies"] if user.get("proxies") else []

            for proxy in proxies:
                proxy_user = next(
                    (item for item in self._users if item["name"] == proxy),
                    None,
                )
                if not proxy_user or not "id" in proxy_user:
                    logger.error(
                        "The proxy -> %s for user -> %s does not exist! Skipping proxy...",
                        proxy,
                        user_name,
                    )
                    success = False
                    continue
                proxy_user_id = proxy_user["id"]

                # Check if the proxy is already set:
                if not self._otcs.is_proxy(proxy):
                    logger.info(
                        "Set user -> %s (%s) as proxy for user -> %s.",
                        proxy,
                        proxy_user_id,
                        user_name,
                    )
                    # set the user proxy - currently we don't support time based proxies in payload.
                    # The called method is ready to support this.
                    response = self._otcs.add_user_proxy(proxy_user_id)
                else:
                    logger.info(
                        "User -> %s (%s) is already proxy for user -> %s. Skipping...",
                        proxy,
                        proxy_user_id,
                        user_name,
                    )
        if self._users:
            # Set back admin credentials:
            self._otcs.set_credentials(
                admin_credentials["username"], admin_credentials["password"]
            )

            # we re-authenticate as the admin user:
            logger.info(
                "Authenticate as admin user -> %s...", admin_credentials["username"]
            )
            # True = force new login with new user
            cookie = self._otcs.authenticate(True)

        # Also for the admin user we want to update the user profile to activate responsive (dynamic) containers:
        response = self._otcs.update_user_profile(
            field="responsiveContainerMode",
            value=True,
            config_section="SmartUI",
        )
        if response is None:
            logger.warning(
                "Profile for admin user couldn't be updated with responsive container mode'!",
            )
        else:
            logger.info(
                "Profile for admin user has been updated to enable responsive container mode.",
            )
        response = self._otcs.update_user_profile(
            field="responsiveContainerMessageMode",
            value=True,
            config_section="SmartUI",
        )
        if response is None:
            logger.warning(
                "Profile for admin user couldn't be updated with responsive container message mode'!",
            )
        else:
            logger.info(
                "Profile for admin user has been updated to enable messages for responsive container mode.",
            )

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_security_clearances(
        self, section_name: str = "securityClearances"
    ) -> bool:
        """Process Security Clearances for Extended ECM.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._security_clearances:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for security_clearance in self._security_clearances:
            clearance_level = security_clearance.get("level")
            clearance_name = security_clearance.get("name")

            if "enabled" in security_clearance and not security_clearance["enabled"]:
                logger.info(
                    "Payload for Security Clearance -> %s is disabled. Skipping...",
                    clearance_name,
                )
                continue

            clearance_description = security_clearance.get("description")
            if not clearance_description:
                clearance_description = ""
            if clearance_level and clearance_name:
                logger.info(
                    "Creating Security Clearance -> %s : %s",
                    clearance_level,
                    clearance_name,
                )
                self._otcs.run_web_report(
                    "web_report_security_clearance", security_clearance
                )
            else:
                logger.error(
                    "Cannot create Security Clearance - either level or name is missing!"
                )
                success = False

        self.write_status_file(success, section_name, self._security_clearances)

        return success

        # end method definition

    def process_supplemental_markings(
        self, section_name: str = "supplementalMarkings"
    ) -> bool:
        """Process Supplemental Markings for Extended ECM.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._supplemental_markings:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for supplemental_marking in self._supplemental_markings:
            code = supplemental_marking.get("code")

            if (
                "enabled" in supplemental_marking
                and not supplemental_marking["enabled"]
            ):
                logger.info(
                    "Payload for Supplemental Marking -> %s is disabled. Skipping...",
                    code,
                )
                continue

            description = supplemental_marking.get("description")
            if not description:
                description = ""
            if code:
                logger.info(
                    "Creating Supplemental Marking -> %s : %s", code, description
                )
                self._otcs.run_web_report(
                    "web_report_supplemental_marking", supplemental_marking
                )
            else:
                logger.error(
                    "Cannot create Supplemental Marking - either code or description is missing!"
                )
                success = False

        self.write_status_file(success, section_name, self._supplemental_markings)

        return success

        # end method definition

    def process_user_security(self, section_name: str = "userSecurity"):
        """Process Security Clearance and Supplemental Markings for Extended ECM users.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for user in self._users:
            user_id = user.get("id")
            user_name = user.get("name")

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue

            # Read security clearance from user payload (it is optional!)
            user_security_clearance = user.get("security_clearance")
            if user_id and user_security_clearance:
                self._otcs.assign_user_security_clearance(
                    user_id, user_security_clearance
                )

            # Read supplemental markings from user payload (it is optional!)
            user_supplemental_markings = user.get("supplemental_markings")
            if user_id and user_supplemental_markings:
                self._otcs.assign_user_supplemental_markings(
                    user_id, user_supplemental_markings
                )

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_records_management_settings(
        self, section_name: str = "recordsManagementSettings"
    ) -> bool:
        """Process Records Management Settings for Extended ECM.
        The setting files need to be placed in the OTCS file system file via
        a transport into the Support Asset Volume.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._records_management_settings:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        if (
            "records_management_system_settings" in self._records_management_settings
            and self._records_management_settings["records_management_system_settings"]
            != ""
        ):
            filename = (
                self._custom_settings_dir
                + self._records_management_settings[
                    "records_management_system_settings"
                ]
            )
            response = self._otcs.import_records_management_settings(filename)
            if not response:
                success = False

        if (
            "records_management_codes" in self._records_management_settings
            and self._records_management_settings["records_management_codes"] != ""
        ):
            filename = (
                self._custom_settings_dir
                + self._records_management_settings["records_management_codes"]
            )
            response = self._otcs.import_records_management_codes(filename)
            if not response:
                success = False

        if (
            "records_management_rsis" in self._records_management_settings
            and self._records_management_settings["records_management_rsis"] != ""
        ):
            filename = (
                self._custom_settings_dir
                + self._records_management_settings["records_management_rsis"]
            )
            response = self._otcs.import_records_management_rsis(filename)
            if not response:
                success = False

        if (
            "physical_objects_system_settings" in self._records_management_settings
            and self._records_management_settings["physical_objects_system_settings"]
            != ""
        ):
            filename = (
                self._custom_settings_dir
                + self._records_management_settings["physical_objects_system_settings"]
            )
            response = self._otcs.import_physical_objects_settings(filename)
            if not response:
                success = False

        if (
            "physical_objects_codes" in self._records_management_settings
            and self._records_management_settings["physical_objects_codes"] != ""
        ):
            filename = (
                self._custom_settings_dir
                + self._records_management_settings["physical_objects_codes"]
            )
            response = self._otcs.import_physical_objects_codes(filename)
            if not response:
                success = False

        if (
            "physical_objects_locators" in self._records_management_settings
            and self._records_management_settings["physical_objects_locators"] != ""
        ):
            filename = (
                self._custom_settings_dir
                + self._records_management_settings["physical_objects_locators"]
            )
            response = self._otcs.import_physical_objects_locators(filename)
            if not response:
                success = False

        if (
            "security_clearance_codes" in self._records_management_settings
            and self._records_management_settings["security_clearance_codes"] != ""
        ):
            filename = (
                self._custom_settings_dir
                + self._records_management_settings["security_clearance_codes"]
            )
            response = self._otcs.import_security_clearance_codes(filename)
            if not response:
                success = False

        self.write_status_file(success, section_name, self._records_management_settings)

        return success

        # end method definition

    def process_holds(self, section_name: str = "holds") -> bool:
        """Process Records Management Holds for Extended ECM users.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._holds:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for hold in self._holds:
            if not "name" in hold:
                logger.error("Cannot create Hold without a name! Skipping...")
                continue
            hold_name = hold["name"]

            if not "type" in hold:
                logger.error(
                    "Cannot create Hold -> %s without a type! Skipping...", hold_name
                )
                success = False
                continue
            hold_type = hold["type"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in hold and not hold["enabled"]:
                logger.info(
                    "Payload for Hold -> %s is disabled. Skipping...", hold_name
                )
                continue

            hold_group = hold.get("group")
            hold_comment = hold.get("comment")
            hold_alternate_id = hold.get("alternate_id")
            hold_date_applied = hold.get("date_applied")
            hold_date_suspend = hold.get("date_to_remove")

            # 550 is the RM Volume
            response = self._otcs.get_node_by_volume_and_path(550, ["Hold Maintenance"])
            if not response:
                logger.error("Cannot find Records Management Volume!")
                continue
            holds_maintenance_id = self._otcs.get_result_value(response, "id")
            if not holds_maintenance_id:
                logger.error(
                    "Cannot find Holds Maintenance folder in Records Management Volume!"
                )
                continue

            if hold_group:
                # Check if the Hold Group (folder) does already exist.
                response = self._otcs.get_node_by_parent_and_name(
                    holds_maintenance_id, hold_group
                )
                parent_id = self._otcs.get_result_value(response, "id")
                if not parent_id:
                    response = self._otcs.create_item(
                        holds_maintenance_id, "833", hold_group
                    )
                    parent_id = self._otcs.get_result_value(response, "id")
                    if not parent_id:
                        logger.error("Failed to create hold group -> %s", hold_group)
                        continue
            else:
                parent_id = holds_maintenance_id

            # Holds are special - they ahve folders that cannot be traversed
            # in the normal way - we need to get the whole list of holds and use
            # specialparameters for the exist_result_items() method as the REST
            # API calls delivers a results->data->holds structure (not properties)
            response = self._otcs.get_records_management_holds()
            if self._otcs.exist_result_item(
                response, "HoldName", hold_name, property_name="holds"
            ):
                logger.info("Hold -> %s does already exist. Skipping...", hold_name)
                continue

            hold = self._otcs.create_records_management_hold(
                hold_type,
                hold_name,
                hold_comment,
                hold_alternate_id,
                int(parent_id),
                hold_date_applied,
                hold_date_suspend,
            )

            if hold and hold["holdID"]:
                logger.info(
                    "Successfully created hold -> %s with ID -> %s",
                    hold_name,
                    hold["holdID"],
                )
            else:
                success = False

        self.write_status_file(success, section_name, self._holds)

        return success

        # end method definition

    def process_additional_group_members(
        self, section_name: str = "additionalGroupMemberships"
    ) -> bool:
        """Process additional groups memberships we want to have in OTDS.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._additional_group_members:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for additional_group_member in self._additional_group_members:
            if not "parent_group" in additional_group_member:
                logger.error("Missing parent_group! Skipping...")
                continue
            parent_group = additional_group_member["parent_group"]

            if (
                "enabled" in additional_group_member
                and not additional_group_member["enabled"]
            ):
                logger.info(
                    "Payload for Additional Group Member with Parent Group -> %s is disabled. Skipping...",
                    parent_group,
                )
                continue

            if (not "user_name" in additional_group_member) and (
                not "group_name" in additional_group_member
            ):
                logger.error(
                    "Either group_name or user_name need to be specified! Skipping..."
                )
                success = False
                continue
            if "group_name" in additional_group_member:
                group_name = additional_group_member["group_name"]
                logger.info(
                    "Adding group -> %s to parent group -> %s in OTDS.",
                    group_name,
                    parent_group,
                )
                response = self._otds.add_group_to_parent_group(
                    group_name, parent_group
                )
                if not response:
                    logger.error(
                        "Failed to add group -> %s to parent group -> %s in OTDS.",
                        group_name,
                        parent_group,
                    )
                    success = False
            elif "user_name" in additional_group_member:
                user_name = additional_group_member["user_name"]
                logger.info(
                    "Adding user -> %s to group -> %s in OTDS.", user_name, parent_group
                )
                response = self._otds.add_user_to_group(user_name, parent_group)
                if not response:
                    logger.error(
                        "Failed to add user -> %s to group -> %s in OTDS.",
                        user_name,
                        parent_group,
                    )
                    success = False

        self.write_status_file(success, section_name, self._additional_group_members)

        return success

        # end method definition

    def process_additional_access_role_members(
        self, section_name: str = "additionalAccessRoleMemberships"
    ) -> bool:
        """Process additional access role memberships we want to have in OTDS.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._additional_access_role_members:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for additional_access_role_member in self._additional_access_role_members:
            if not "access_role" in additional_access_role_member:
                logger.error("Missing access_role! Skipping...")
                continue
            access_role = additional_access_role_member["access_role"]

            if (
                "enabled" in additional_access_role_member
                and not additional_access_role_member["enabled"]
            ):
                logger.info(
                    "Payload for Additional Member for AccessRole -> %s is disabled. Skipping...",
                    access_role,
                )
                continue

            if (
                (not "user_name" in additional_access_role_member)
                and (not "group_name" in additional_access_role_member)
                and (not "partition_name" in additional_access_role_member)
            ):
                logger.error(
                    "Either group_name or user_name need to be specified! Skipping..."
                )
                success = False
                continue
            if "group_name" in additional_access_role_member:
                group_name = additional_access_role_member["group_name"]
                logger.info(
                    "Adding group -> %s to access role -> %s in OTDS.",
                    group_name,
                    access_role,
                )
                response = self._otds.add_group_to_access_role(access_role, group_name)
                if not response:
                    logger.error(
                        "Failed to add group -> %s to access role -> %s in OTDS.",
                        group_name,
                        access_role,
                    )
                    success = False
            elif "user_name" in additional_access_role_member:
                user_name = additional_access_role_member["user_name"]
                logger.info(
                    "Adding user -> %s to access role -> %s in OTDS.",
                    user_name,
                    access_role,
                )
                response = self._otds.add_user_to_access_role(access_role, user_name)
                if not response:
                    logger.error(
                        "Failed to add user -> %s to access role -> %s in OTDS.",
                        user_name,
                        access_role,
                    )
                    success = False
            elif "partition_name" in additional_access_role_member:
                partition_name = additional_access_role_member["partition_name"]
                logger.info(
                    "Adding partition -> %s to access role -> %s in OTDS.",
                    partition_name,
                    access_role,
                )
                response = self._otds.add_partition_to_access_role(
                    access_role, partition_name
                )
                if not response:
                    logger.error(
                        "Failed to add partition -> %s to access role -> %s in OTDS.",
                        partition_name,
                        access_role,
                    )
                    success = False

        self.write_status_file(
            success, section_name, self._additional_access_role_members
        )

        return success

        # end method definition

    def process_renamings(self, section_name: str = "renamings") -> bool:
        """Process renamings specified in payload and rename existing Extended ECM items.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._renamings:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for renaming in self._renamings:
            if not "nodeid" in renaming:
                if not "volume" in renaming:
                    logger.error(
                        "Renamings require either a node ID or a volume! Skipping to next renaming..."
                    )
                    continue
                # Determine object ID of volume:
                volume = self._otcs.get_volume(renaming["volume"])
                node_id = self._otcs.get_result_value(volume, "id")
            else:
                node_id = renaming["nodeid"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in renaming and not renaming["enabled"]:
                logger.info("Payload for Renaming is disabled. Skipping...")
                continue

            response = self._otcs.rename_node(
                int(node_id), renaming["name"], renaming["description"]
            )
            if not response:
                logger.error(
                    "Failed to rename node ID -> %s to new name -> %s.",
                    node_id,
                    renaming["name"],
                )
                success = False

        self.write_status_file(success, section_name, self._renamings)

        return success

        # end method definition

    def process_items(self, items: list, section_name: str = "items") -> bool:
        """Process items specified in payload and create them in Extended ECM.

        Args:
            items (list): list of items to create (need this as parameter as we
                          have multiple lists)
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "itemsPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not items:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)

            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for item in items:
            if not "name" in item:
                logger.error("Item needs a name. Skipping...")
                continue
            item_name = item["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in item and not item["enabled"]:
                logger.info(
                    "Payload for Item -> %s is disabled. Skipping...", item_name
                )
                continue

            if not "description" in item:
                item_description = ""
            else:
                item_description = item["description"]

            parent_nickname = item.get("parent_nickname")
            parent_path = item.get("parent_path")

            if parent_nickname:
                parent_node = self._otcs.get_node_from_nickname(parent_nickname)
                parent_id = self._otcs.get_result_value(parent_node, "id")
                # if not parent_node:
                if not parent_id:
                    logger.error(
                        "Item -> %s has a parent nickname -> %s that does not exist. Skipping...",
                        item_name,
                        parent_nickname,
                    )
                    success = False
                    continue
            else:  # use parent_path and Enterprise Volume
                parent_node = self._otcs.get_node_by_volume_and_path(141, parent_path)
                parent_id = self._otcs.get_result_value(parent_node, "id")
                if not parent_id:
                    # if not parent_node:
                    logger.error(
                        "Item -> %s has a parent path that does not exist. Skipping...",
                        item_name,
                    )
                    success = False
                    continue

            original_nickname = item.get("original_nickname")
            original_path = item.get("original_path")

            if original_nickname:
                original_node = self._otcs.get_node_from_nickname(original_nickname)
                original_id = self._otcs.get_result_value(original_node, "id")
                if not original_id:
                    # if not original_node:
                    logger.error(
                        "Item -> %s has a original nickname -> %s that does not exist. Skipping...",
                        item_name,
                        original_nickname,
                    )
                    success = False
                    continue
            elif original_path:
                original_node = self._otcs.get_node_by_volume_and_path(
                    141, original_path
                )
                original_id = self._otcs.get_result_value(original_node, "id")
                if not original_id:
                    # if not original_node:
                    logger.error(
                        "Item -> %s has a original path that does not exist. Skipping...",
                        item_name,
                    )
                    success = False
                    continue
            else:
                original_id = 0

            if not "type" in item:
                logger.error("Item -> %s needs a type. Skipping...", item_name)
                success = False
                continue

            item_type = item.get("type")
            item_url = item.get("url")

            # check that we have the required information
            # for the given item type:
            match item_type:
                case 140:  # URL
                    if item_url == "":
                        logger.error(
                            "Item -> %s has type URL but the URL is not in the payload. Skipping...",
                            item_name,
                        )
                        success = False
                        continue
                case 1:  # Shortcut
                    if original_id == 0:
                        logger.error(
                            "Item -> %s has type Shortcut but the original item is not in the payload. Skipping...",
                            item_name,
                        )
                        success = False
                        continue

            # Check if an item with the same name does already exist.
            # This can also be the case if the python container runs a 2nd time.
            # For this reason we are also not issuing an error but just an info (False):
            response = self._otcs.get_node_by_parent_and_name(
                int(parent_id), item_name, show_error=False
            )
            if self._otcs.get_result_value(response, "name") == item_name:
                logger.info(
                    "Item with name -> %s does already exist in parent folder with ID -> %s",
                    item_name,
                    parent_id,
                )
                continue
            response = self._otcs.create_item(
                int(parent_id),
                str(item_type),
                item_name,
                item_description,
                item_url,
                int(original_id),
            )
            if not response:
                logger.error("Failed to create item -> %s.", item_name)
                success = False

        self.write_status_file(success, section_name, items)

        return success

        # end method definition

    def process_permissions(
        self, permissions: list, section_name: str = "permissions"
    ) -> bool:
        """Process items specified in payload and upadate permissions.

        Args:
            permissions (list): list of items to apply permissions to.
                         Each list item in the payload is a dict with this structure:
                            {
                                nodeid = "..."
                                volume = "..."
                                nickname = "..."
                                public_access_permissions = ["see", "see_content", ...]
                                owner_permissions = []
                                owner_group_permissions = []
                                groups = [
                                {
                                    name = "..."
                                    permissions = []
                                }
                                ]
                                users = [
                                {
                                    name = "..."
                                    permissions = []
                                }
                                ]
                                apply_to = 2
                            }
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections like "permissionsPost")
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace

        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not permissions:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for permission in permissions:
            if (
                not "path" in permission
                and not "volume" in permission
                and not "nickname" in permission
            ):
                logger.error(
                    "Item to change permission is not specified (needs path, volume, or nickname). Skipping..."
                )
                success = False
                continue

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in permission and not permission["enabled"]:
                logger.info("Payload for Permission is disabled. Skipping...")
                continue

            node_id = 0

            # Check if "volume" is in payload and not empty string
            # we try to get the node ID from the volume type:
            if "volume" in permission and permission["volume"]:
                volume_type = permission["volume"]
                logger.info(
                    "Found volume type -> %s in permission definition. Determine volume ID...",
                    volume_type,
                )
                node = self._otcs.get_volume(volume_type)
                node_id = self._otcs.get_result_value(node, "id")
                if not node_id:
                    logger.error(
                        "Illegal volume -> %s in permission specification. Skipping...",
                        volume_type,
                    )
                    success = False
                    continue
            else:
                # the following path block requires
                # a value for the volume - if it is
                # not specified we take the Enterprise Workspace (141):
                volume_type = 141

            # Check if "path" is in payload and not empty list
            # (path can be combined with volume so we need to take volume into account):
            if "path" in permission and permission["path"]:
                path = permission["path"]
                logger.info(
                    "Found path -> %s in permission definition. Determine node ID...",
                    path,
                )
                node = self._otcs.get_node_by_volume_and_path(volume_type, path)
                node_id = self._otcs.get_result_value(node, "id")
                if not node_id:
                    logger.error("Path -> %s does not exist. Skipping...", path)
                    success = False
                    continue

            # Check if "nickname" is in payload and not empty string:
            if "nickname" in permission and permission["nickname"]:
                nickname = permission["nickname"]
                logger.info(
                    "Found nickname -> %s in permission definition. Determine node ID...",
                    nickname,
                )
                node = self._otcs.get_node_from_nickname(nickname)
                node_id = self._otcs.get_result_value(node, "id")
                if not node_id:
                    logger.error("Nickname -> {} does not exist. Skipping...")
                    success = False
                    continue

            # Now we should have a value for node_id:
            if not node_id:
                logger.error("No node ID found! Skipping permission...")
                success = False
                continue

            node_name = self._otcs.get_result_value(node, "name")
            logger.info(
                "Found node -> %s with ID -> %s to apply permission to.",
                node_name,
                node_id,
            )
            # write node information back into payload
            # for better debugging
            permission["node_name"] = node_name
            permission["node_id"] = node_id

            if "apply_to" in permission:
                apply_to = permission["apply_to"]
            else:
                apply_to = 2  # make item + sub-items the default

            # 1. Process Owner Permissions (list canbe empty!)
            if "owner_permissions" in permission:
                owner_permissions = permission["owner_permissions"]
                logger.info(
                    "Update owner permissions for item -> %s (%s) to -> %s",
                    node_name,
                    str(node_id),
                    str(owner_permissions),
                )
                response = self._otcs.assign_permission(
                    int(node_id), "owner", 0, owner_permissions, apply_to
                )
                if not response:
                    logger.error(
                        "Failed to update owner permissions for item -> %s (%s).",
                        node_name,
                        str(node_id),
                    )
                    success = False

            # 2. Process Owner Group Permissions
            if "owner_group_permissions" in permission:
                owner_group_permissions = permission["owner_group_permissions"]
                logger.info(
                    "Update owner group permissions for item -> %s (%s) to -> %s",
                    node_name,
                    str(node_id),
                    str(owner_group_permissions),
                )
                response = self._otcs.assign_permission(
                    int(node_id), "group", 0, owner_group_permissions, apply_to
                )
                if not response:
                    logger.error(
                        "Failed to update group permissions for item -> %s (%s).",
                        node_name,
                        str(node_id),
                    )
                    success = False

            # 3. Process Public Permissions
            if "public_permissions" in permission:
                public_permissions = permission["public_permissions"]
                logger.info(
                    "Update public permissions for item -> %s (%s) to -> %s",
                    node_name,
                    str(node_id),
                    str(public_permissions),
                )
                response = self._otcs.assign_permission(
                    int(node_id), "public", 0, public_permissions, apply_to
                )
                if not response:
                    logger.error(
                        "Failed to update public permissions for item -> %s (%s).",
                        str(node_id),
                        node_name,
                    )
                    success = False
                    continue

            # 4. Process Assigned User Permissions (if specified and not empty)
            if "users" in permission and permission["users"]:
                users = permission["users"]
                for user in users:
                    if not "name" in user or not "permissions" in user:
                        logger.error(
                            "Missing user name or permissions in user permission specificiation. Cannot set user permissions. Skipping..."
                        )
                        success = False
                        continue
                    user_name = user["name"]
                    user_permissions = user["permissions"]
                    response = self._otcs.get_user(user_name, True)
                    user_id = self._otcs.get_result_value(response=response, key="id")
                    if not user_id:
                        logger.error(
                            "Cannot find user with name -> %s; cannot set user permissions. Skipping user...",
                            user_name,
                        )
                        success = False
                        continue
                    user["id"] = user_id  # write ID back into payload

                    logger.info(
                        "Update permission of user -> %s for item -> %s (%s) to -> %s",
                        user_name,
                        node_name,
                        str(node_id),
                        str(user_permissions),
                    )
                    response = self._otcs.assign_permission(
                        int(node_id), "custom", user_id, user_permissions, apply_to
                    )
                    if not response:
                        logger.error(
                            "Failed to update assigned user permissions for item -> %s.",
                            node_id,
                        )
                        success = False

            # 5. Process Assigned Group Permissions (if specified and not empty)
            if "groups" in permission and permission["groups"]:
                groups = permission["groups"]
                for group in groups:
                    if not "name" in group or not "permissions" in group:
                        logger.error(
                            "Missing group name or permissions in group permission specificiation. Cannot set group permissions. Skipping..."
                        )
                        continue
                    group_name = group["name"]
                    group_permissions = group["permissions"]
                    logger.info(
                        "Update permissions of group -> %s for item -> %s (%s) to -> %s",
                        group_name,
                        node_name,
                        str(node_id),
                        str(group_permissions),
                    )
                    otcs_group = self._otcs.get_group(group_name, True)
                    group_id = self._otcs.get_result_value(otcs_group, "id")
                    if not group_id:
                        logger.error(
                            "Cannot find group with name -> %s; cannot set group permissions. Skipping group...",
                            group_name,
                        )
                        success = False
                        continue
                    group["id"] = group_id  # write ID back into payload
                    response = self._otcs.assign_permission(
                        int(node_id), "custom", group_id, group_permissions, apply_to
                    )
                    if not response:
                        logger.error(
                            "Failed to update assigned group permissions for item -> %s (%s).",
                            node_name,
                            str(node_id),
                        )
                        success = False

        self.write_status_file(success, section_name, permissions)

        return success

        # end method definition

    def process_assignments(self, section_name: str = "assignments") -> bool:
        """Process assignments specified in payload and assign items (such as workspaces and
        items withnicknames) to users or groups.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._assignments:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for assignment in self._assignments:
            # Sanity check: we need a subject - it's mandatory:
            if not "subject" in assignment:
                logger.error("Assignment needs a subject! Skipping assignment...")
                success = False
                continue
            subject = assignment["subject"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in assignment and not assignment["enabled"]:
                logger.info(
                    "Payload for Assignment -> %s is disabled. Skipping...", subject
                )
                continue

            # instruction is optional but we give a warning if they are missing:
            if not "instruction" in assignment:
                logger.warning("Assignment -> %s should have an instruction!", subject)
                instruction = ""
            else:
                instruction = assignment["instruction"]
            # Sanity check: we either need users or groups (or both):
            if not "groups" in assignment and not "users" in assignment:
                logger.error(
                    "Assignment -> %s needs groups or users! Skipping assignment...",
                    subject,
                )
                success = False
                continue
            # Check if a workspace is specified for the assignment and check it does exist:
            if "workspace" in assignment and assignment["workspace"]:
                workspace = next(
                    (
                        item
                        for item in self._workspaces
                        if item["id"] == assignment["workspace"]
                    ),
                    None,
                )
                if not workspace:
                    logger.error(
                        "Assignment -> %s has specified a not existing workspace -> %s! Skipping assignment...",
                        subject,
                        assignment["workspace"],
                    )
                    success = False
                    continue
                node_id = self.determine_workspace_id(workspace)
                if not node_id:
                    logger.error(
                        "Assignment -> %s has specified a not existing workspace -> %s! Skipping assignment...",
                        subject,
                        assignment["workspace"],
                    )
                    success = False
                    continue
            # If we don't have a workspace then check if a nickname is specified for the assignment:
            elif "nickname" in assignment:
                response = self._otcs.get_node_from_nickname(assignment["nickname"])
                node_id = self._otcs.get_result_value(response, "id")
                if not node_id:
                    # if response == None:
                    logger.error(
                        "Assignment item with nickname -> %s not found",
                        assignment["nickname"],
                    )
                    success = False
                    continue
            else:
                logger.error(
                    "Assignment -> %s needs a workspace or nickname! Skipping assignment...",
                    subject,
                )
                success = False
                continue

            assignees = []

            if "groups" in assignment:
                group_assignees = assignment["groups"]
                for group_assignee in group_assignees:
                    # find the group in the group list
                    group = next(
                        (
                            item
                            for item in self._groups
                            if item["name"] == group_assignee
                        ),
                        None,
                    )
                    if not group:
                        logger.error(
                            "Assignment group -> %s does not exist! Skipping group...",
                            group_assignee,
                        )
                        success = False
                        continue
                    if not "id" in group:
                        logger.error(
                            "Assignment group -> %s does not have an ID. Skipping group...",
                            group_assignee,
                        )
                        success = False
                        continue
                    group_id = group["id"]
                    # add the group ID to the assignee list:
                    assignees.append(group_id)

            if "users" in assignment:
                user_assignees = assignment["users"]
                for user_assignee in user_assignees:
                    # find the user in the user list
                    user = next(
                        (item for item in self._users if item["name"] == user_assignee),
                        None,
                    )
                    if not user:
                        logger.error(
                            "Assignment user -> %s does not exist! Skipping user...",
                            user_assignee,
                        )
                        success = False
                        continue
                    if not "id" in user:
                        logger.error(
                            "Assignment user -> %s does not have an ID. Skipping user...",
                            user_assignee,
                        )
                        success = False
                        continue
                    user_id = user["id"]
                    # add the group ID to the assignee list:
                    assignees.append(user_id)

            if not assignees:
                logger.error(
                    "Cannot add assignment -> %s for node ID -> %s because no assignee was found.",
                    subject,
                    node_id,
                )
                success = False
                continue

            response = self._otcs.assign_item_to_user_group(
                int(node_id), subject, instruction, assignees
            )
            if not response:
                logger.error(
                    "Failed to add assignment -> %s for node ID -> %s with assignees -> %s.",
                    subject,
                    node_id,
                    assignees,
                )
                success = False

        self.write_status_file(success, section_name, self._assignments)

        return success

        # end method definition

    def process_user_licenses(
        self,
        resource_name: str,
        license_feature: str,
        license_name: str,
        user_specific_payload_field: str = "licenses",
        section_name: str = "userLicenses",
    ) -> bool:
        """Assign a specific OTDS license feature to all Extended ECM users.
           This method is used for OTIV and Extended ECM licenses.

        Args:
            resource_name (str): name of the OTDS resource
            license_feature (str): license feature to assign to the user (product specific)
            license_name (str): Name of the license Key (e.g. "EXTENDED_ECM" or "INTELLIGENT_VIEWING")
            user_specific_payload_field (str, optional): name of the user specific field in payload
                                                         (if empty it will be ignored)
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._users:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        otds_resource = self._otds.get_resource(resource_name)
        if not otds_resource:
            logger.error(
                "OTDS Resource -> {} not found. Cannot assign licenses to users."
            )
            return False

        user_partition = self._otcs.config()["partition"]
        if not user_partition:
            logger.error("OTCS user partition not found in OTDS!")
            return False

        for user in self._users:
            user_name = user["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in user and not user["enabled"]:
                logger.info(
                    "Payload for User -> %s is disabled. Skipping...", user_name
                )
                continue

            if user_specific_payload_field and user_specific_payload_field in user:
                logger.info(
                    "Found specific license feature -> %s for User -> %s. Overwriting default license feature -> %s",
                    user[user_specific_payload_field],
                    user_name,
                    license_feature,
                )
                user_license_feature = user[user_specific_payload_field]
            else:  # use the default feature from the actual parameter
                user_license_feature = [license_feature]

            for license_feature in user_license_feature:
                if self._otds.is_user_licensed(
                    user_name=user_name,
                    resource_id=otds_resource["resourceID"],
                    license_feature=license_feature,
                    license_name=license_name,
                ):
                    logger.info(
                        "User -> %s is already licensed for -> %s (%s)",
                        user_name,
                        license_name,
                        license_feature,
                    )
                    continue
                assigned_license = self._otds.assign_user_to_license(
                    user_partition,
                    user_name,  # we want the plain login name here
                    otds_resource["resourceID"],
                    license_feature,
                    license_name,
                )

                if not assigned_license:
                    logger.error(
                        "Failed to assign license feature -> %s to user -> %s!",
                        license_feature,
                        user_name,
                    )
                    success = False

        self.write_status_file(success, section_name, self._users)

        return success

        # end method definition

    def process_exec_pod_commands(self, section_name: str = "execPodCommands") -> bool:
        """Process commands that should be executed in the Kubernetes pods.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not isinstance(self._k8s, K8s):
            logger.error("K8s not setup properly -> Skipping %s...", section_name)
            return False

        if not self._exec_pod_commands:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for exec_pod_command in self._exec_pod_commands:
            if not "pod_name" in exec_pod_command:
                logger.error(
                    "To execute a command in a pod the pod name needs to be specified in the payload! Skipping to next pod command..."
                )
                success = False
                continue
            pod_name = exec_pod_command["pod_name"]

            if not "command" in exec_pod_command or not exec_pod_command.get("command"):
                logger.error(
                    "Pod command is not specified for pod -> %s! It needs to be a non-empty list! Skipping to next pod command...",
                    pod_name,
                )
                success = False
                continue
            command = exec_pod_command["command"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in exec_pod_command and not exec_pod_command["enabled"]:
                logger.info(
                    "Payload for Exec Pod Command in pod -> %s is disabled. Skipping...",
                    pod_name,
                )
                continue

            if not "description" in exec_pod_command:
                logger.info("Executing command -> %s in pod -> %s", command, pod_name)

            else:
                description = exec_pod_command["description"]
                logger.info(
                    "Executing command -> %s in pod -> %s (%s)",
                    command,
                    pod_name,
                    description,
                )

            if (
                not "interactive" in exec_pod_command
                or exec_pod_command["interactive"] is False
            ):
                result = self._k8s.exec_pod_command(pod_name, command)
            else:
                if not "timeout" in exec_pod_command:
                    result = self._k8s.exec_pod_command_interactive(pod_name, command)
                else:
                    timeout = exec_pod_command["timeout"]
                    result = self._k8s.exec_pod_command_interactive(
                        pod_name, command, timeout
                    )

            # we need to differentiate 3 cases here:
            # 1. result = None is returned - this is an error (exception)
            # 2. result is empty string - this is OK
            # 3. result is a non-empty string - this is OK - print it to log
            if result is None:
                logger.error(
                    "Execution of command -> %s in pod -> %s failed",
                    command,
                    pod_name,
                )
                success = False
            elif result != "":
                logger.info(
                    "Execution of command -> %s in pod -> %s returned result -> %s",
                    command,
                    pod_name,
                    result,
                )
            else:
                # It is not an error if no result is returned. It depends on the nature of the command
                # if a result is written to stdout or stderr.
                logger.info(
                    "Execution of command -> %s in pod -> %s did not return a result",
                    command,
                    pod_name,
                )

        self.write_status_file(success, section_name, self._exec_pod_commands)

        return success

        # end method definition

    def process_document_generators(
        self, section_name: str = "documentGenerators"
    ) -> bool:
        """Generate documents for a defined workspace type based on template

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._doc_generators:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        # save admin credentials for later switch back to admin user:
        admin_credentials = self._otcs.credentials()
        authenticated_user = "admin"

        for doc_generator in self._doc_generators:
            if not "workspace_type" in doc_generator:
                logger.error(
                    "To generate documents for workspaces the workspace type needs to be specified in the payload! Skipping to next document generator..."
                )
                success = False
                continue
            workspace_type = doc_generator["workspace_type"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in doc_generator and not doc_generator["enabled"]:
                logger.info(
                    "Payload for document generator of workspace type -> %s is disabled. Skipping...",
                    workspace_type,
                )
                continue

            if not "template_path" in doc_generator:
                logger.error(
                    "To generate documents for workspaces of type -> %s the path to the document template needs to be specified in the payload! Skipping to next document generator...",
                    workspace_type,
                )
                success = False
                continue
            template_path = doc_generator["template_path"]
            # 20541 is the ID of the Document Template Volume which
            # (we hope) is stable:
            template = self._otcs.get_node_by_volume_and_path(20541, template_path)
            if not template:
                logger.error(
                    "Cannot find document template in path -> %s. Skipping to next document generator...",
                    template_path,
                )
                success = False
                continue
            template_id = self._otcs.get_result_value(template, "id")
            template_name = self._otcs.get_result_value(template, "name")

            if not "classification_path" in doc_generator:
                logger.error(
                    "To generate documents for workspaces of type -> %s the path to the document classification needs to be specified in the payload! Skipping to next document generator...",
                    workspace_type,
                )
                success = False
                continue
            classification_path = doc_generator["classification_path"]
            classification = self._otcs.get_node_by_volume_and_path(
                198, classification_path
            )
            if not classification:
                logger.error(
                    "Cannot find document classification in path -> %s. Skipping to next document generator...",
                    classification_path,
                )
                success = False
                continue
            classification_id = self._otcs.get_result_value(classification, "id")

            # "category_name" is optional. But if it is specified
            # then also "attributes" needs to be specified:
            if not "category_name" in doc_generator:
                logger.info(
                    "No metadata (category name) specified in the payload for this document generator.",
                )
                category_name = ""
                attributes = {}
                category_data = {}
            else:
                category_name = doc_generator["category_name"]
                if not "attributes" in doc_generator:
                    logger.error(
                        "To generate documents for workspaces of type -> %s with metadata, the attributes needs to be specified in the payload! Skipping to next document generator...",
                        workspace_type,
                    )
                    success = False
                    continue
                attributes = doc_generator["attributes"]

                # The following method returns two values: the category ID and
                # a dict of the attributes. If the category is not found
                # on the document template it returns -1 for the category ID
                # and an empty dict for the attribute definitions:
                (
                    category_id,
                    attribute_definitions,
                ) = self._otcs.get_node_category_definition(template_id, category_name)
                if category_id == -1:
                    logger.error(
                        "The document template -> %s does not have the specified category -> %s. Skipping to next document generator...",
                        template_name,
                        category_name,
                    )
                    success = False
                    continue

                category_data = {str(category_id): {}}

                # now we fill the prepared (but empty) category_data
                # with the actual attribute values from the payload:
                for attribute in attributes:
                    attribute_name = attribute["name"]
                    attribute_value = attribute["value"]
                    attribute_type = attribute_definitions[attribute_name]["type"]
                    attribute_id = attribute_definitions[attribute_name]["id"]

                    # Special treatment for type user: determine the ID for the login name.
                    # the ID is the actual value we have to put in the attribute:
                    if attribute_type == "user":
                        user = self._otcs.get_user(attribute_value, show_error=True)
                        user_id = self._otcs.get_result_value(response=user, key="id")
                        if not user_id:
                            logger.error(
                                "Cannot find user with login name -> %s. Skipping...",
                                attribute_value,
                            )
                            success = False
                            continue
                        attribute_value = user_id
                    category_data[str(category_id)][attribute_id] = attribute_value

            if not "workspace_folder_path" in doc_generator:
                logger.info(
                    "No workspace folder path defined for workspaces of type -> %s. Documents will be stored in workspace root.",
                    workspace_type,
                )
                workspace_folder_path = []
            else:
                workspace_folder_path = doc_generator["workspace_folder_path"]

            if "exec_as_user" in doc_generator:
                exec_as_user = doc_generator["exec_as_user"]

                # Find the user in the users payload:
                exec_user = next(
                    (item for item in self._users if item["name"] == exec_as_user),
                    None,
                )
                # Have we found the user in the payload?
                if exec_user is not None:
                    logger.info(
                        "Executing document generator with user -> %s", exec_as_user
                    )
                    # we change the otcs credentials to the user:
                    self._otcs.set_credentials(exec_user["name"], exec_user["password"])

                    # we re-authenticate as the user:
                    logger.info("Authenticate user -> %s...", exec_as_user)
                    # True = force new login with new user
                    cookie = self._otcs.authenticate(True)
                    if not cookie:
                        logger.error("Couldn't authenticate user -> %s", exec_as_user)
                        continue
                    admin_context = False
                    authenticated_user = exec_as_user
                else:
                    logger.error(
                        "Cannot find user with login name -> %s for executing. Executing as admin...",
                        exec_as_user,
                    )
                    admin_context = True
                    success = False
            else:
                admin_context = True
                exec_as_user = "admin"

            if admin_context and authenticated_user != "admin":
                # Set back admin credentials:
                self._otcs.set_credentials(
                    admin_credentials["username"], admin_credentials["password"]
                )

                # we re-authenticate as the admin user:
                logger.info(
                    "Authenticate as admin user -> %s...", admin_credentials["username"]
                )
                # True = force new login with new user
                cookie = self._otcs.authenticate(True)
                authenticated_user = "admin"

            if category_data:
                logger.info(
                    "Generate documents for workspace type -> %s based on template -> %s with metadata -> %s...",
                    workspace_type,
                    template_name,
                    category_data,
                )
            else:
                logger.info(
                    "Generate documents for workspace type -> %s based on template -> %s without metadata...",
                    workspace_type,
                    template_name,
                )

            # Find the workspace type with the name given in the _workspace_types
            # datastructure that has been generated by process_workspace_type() method before:
            workspace_type_id = next(
                (
                    item["id"]
                    for item in self._workspace_types
                    if item["name"] == workspace_type
                ),
                None,
            )
            workspace_instances = self._otcs.get_workspace_instances(
                type_name=workspace_type, type_id=workspace_type_id
            )
            if not workspace_instances or not workspace_instances["results"]:
                logger.warning(
                    "No workspace instances found for workspace type -> %s (%s)",
                    workspace_type,
                    workspace_type_id,
                )
            for workspace_instance in workspace_instances["results"]:
                workspace_id = workspace_instance["data"]["properties"]["id"]
                workspace_name = workspace_instance["data"]["properties"]["name"]
                if workspace_folder_path:
                    workspace_folder = self._otcs.get_node_by_workspace_and_path(
                        workspace_id, workspace_folder_path
                    )
                    if workspace_folder:
                        workspace_folder_id = self._otcs.get_result_value(
                            workspace_folder, "id"
                        )
                    else:
                        # If the workspace template is not matching
                        # the path we may have an error here. Then
                        # we fall back to workspace root level.
                        logger.warning(
                            "Folder path does not exist in workspace -> %s. Using workspace root level instead...",
                            workspace_name,
                        )
                        workspace_folder_id = workspace_id
                else:
                    workspace_folder_id = workspace_id

                document_name = workspace_name + " - " + template_name
                logger.info("Generate document -> %s", document_name)

                response = self._otcs.check_node_name(
                    int(workspace_folder_id), document_name
                )
                if response["results"]:
                    logger.warning(
                        "Node with name -> %s does already exist in workspace folder with ID -> %s",
                        document_name,
                        workspace_folder_id,
                    )
                    continue
                response = self._otcs.create_document_from_template(
                    int(template_id),
                    int(workspace_folder_id),
                    int(classification_id),
                    category_data,
                    document_name,
                    "This document has been auto-generated by Terrarium",
                )
                if not response:
                    logger.error(
                        "Failed to generate document -> %s in workspace -> %s (%s) as user -> %s",
                        document_name,
                        workspace_name,
                        workspace_id,
                        exec_as_user,
                    )
                    success = False
                else:
                    logger.info(
                        "Successfully generated document -> %s in workspace -> %s",
                        document_name,
                        workspace_name,
                    )

        if authenticated_user != "admin":
            # Set back admin credentials:
            self._otcs.set_credentials(
                admin_credentials["username"], admin_credentials["password"]
            )

            # we authenticate back as the admin user:
            logger.info(
                "Authenticate as admin user -> %s...", admin_credentials["username"]
            )
            # True = force new login with new user
            cookie = self._otcs.authenticate(True)

        self.write_status_file(success, section_name, self._doc_generators)

        return success

        # end method definition

    def process_browser_automations(
        self, section_name: str = "browserAutomations", check_status: bool = True
    ) -> bool:
        """Process Selenium-based browser automations.

        Args:
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not self._browser_automations:
            logger.info("Payload section -> %s is empty. Skipping...", section_name)
            return True

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if check_status and self.check_status_file(section_name):
            return True

        success: bool = True

        for browser_automation in self._browser_automations:
            description = browser_automation.get("description", "")

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in browser_automation and not browser_automation["enabled"]:
                logger.info(
                    "Payload for Browser Automation -> %s is disabled. Skipping...",
                    description,
                )
                continue

            if not "base_url" in browser_automation:
                logger.error("Browser automation is missing base_url. Skipping...")
                success = False
                continue
            base_url = browser_automation.get("base_url")

            if not "user_name" in browser_automation:
                logger.info("Browser automation is not having user name.")
            user_name = browser_automation.get("user_name", "")

            if not "password" in browser_automation:
                logger.info("Browser automation is not having password.")
            password = browser_automation.get("password", "")

            if not "automations" in browser_automation:
                logger.error(
                    "Browser automation is missing list of automations. Skipping..."
                )
                success = False
                continue
            automations = browser_automation.get("automations", [])

            # Create Selenium Browser Automation:
            logger.info("Browser Automation URL -> %s", base_url)
            logger.info("Browser Automation User -> %s", user_name)
            logger.debug("Browser Automation Password -> %s", password)
            browser_automation_object = BrowserAutomation(
                base_url=base_url,
                user_name=user_name,
                user_password=password,
            )

            for automation in automations:
                if not "type" in automation:
                    logger.error("Browser automation step is missing type. Skipping...")
                    success = False
                    break
                automation_type = automation.get("type", "")

                match automation_type:
                    case "login":
                        page = automation.get("page", "")
                        logger.info(
                            "Login to -> %s as user -> %s", base_url + page, user_name
                        )
                        user_field = automation.get("user_field", "otds_username")
                        password_field = automation.get(
                            "password_field", "otds_password"
                        )
                        login_button = automation.get("login_button", "loginbutton")
                        if not browser_automation_object.run_login(
                            user_field=user_field,
                            password_field=password_field,
                            login_button=login_button,
                        ):
                            logger.error(
                                "Cannot log into -> %s. Stopping automation.",
                                base_url + page,
                            )
                            success = False
                            break
                        else:
                            logger.info(
                                "Successfuly logged into page -> %s.", base_url + page
                            )
                    case "get_page":
                        page = automation.get("page", "")
                        if not page:
                            logger.error(
                                "Automation type -> %s requires page parameter",
                                automation_type,
                            )
                            success = False
                            break
                        logger.info("Get page -> %s", base_url + page)
                        if not browser_automation_object.get_page(url=page):
                            logger.error(
                                "Cannot get page -> %s. Stopping automation.",
                                page,
                            )
                            success = False
                            break
                        else:
                            browser_automation_object.implict_wait(15.0)
                            logger.info(
                                "Successfuly loaded page -> %s.", base_url + page
                            )
                    case "click_elem":
                        elem = automation.get("elem", "")
                        if not elem:
                            logger.error(
                                "Automation type -> %s requires elem parameter",
                                automation_type,
                            )
                            success = False
                            break
                        find = automation.get("find", "id")
                        if not browser_automation_object.find_elem_and_click(
                            find_elem=elem, find_method=find
                        ):
                            logger.error(
                                "Cannot find clickable element -> %s on current page. Stopping automation.",
                                elem,
                            )
                            success = False
                            break
                        else:
                            browser_automation_object.implict_wait(15.0)
                            logger.info("Successfuly clicked element -> %s.", elem)
                    case "set_elem":
                        elem = automation.get("elem", "")
                        if not elem:
                            logger.error(
                                "Automation type -> %s requires elem parameter",
                                automation_type,
                            )
                            success = False
                            break
                        find = automation.get("find", "id")
                        value = automation.get("value", "")
                        if not value:
                            logger.error(
                                "Automation type -> %s requires value parameter",
                                automation_type,
                            )
                            success = False
                            break
                        # we also support replacing placeholders that are
                        # enclosed in double % characters like %%OTCS_RESOURCE_ID%%:
                        value = self.replace_placeholders(value)
                        if not browser_automation_object.find_elem_and_set(
                            find_elem=elem, elem_value=value, find_method=find
                        ):
                            logger.error(
                                "Cannot find element -> %s on current page to set value -> %s. Stopping automation.",
                                elem,
                                value,
                            )
                            success = False
                            break
                        else:
                            logger.info(
                                "Successfuly set element -> %s to set value -> %s.",
                                elem,
                                value,
                            )
                    case _:
                        logger.error(
                            "Illegal automation step type -> %s in browser automation!",
                            automation_type,
                        )
                        success = False
                        break

        if check_status:
            self.write_status_file(success, section_name, self._browser_automations)

        return success

        # end method definition

    def init_sap(
        self, sap_external_system: dict, direct_application_server_login: bool = True
    ) -> SAP | None:
        """Initialize SAP object for RFC communication with SAP S/4HANA.

        Args:
            sap_external_system (dict): SAP external system created before
            direct_application_server_login (bool): flag to control wether we comminicate directly with
                                                    SAP application server or via a load balancer
        Returns:
            SAP: SAP object
        """

        if not sap_external_system:
            return None

        username = sap_external_system["username"]
        password = sap_external_system["password"]
        # "external_system_hostname" is extracted from as_url in process_external_systems()
        host = sap_external_system["external_system_hostname"]
        client = sap_external_system.get("client", "100")
        system_number = sap_external_system.get("external_system_number", "00")
        system_id = sap_external_system["external_system_name"]
        group = sap_external_system.get("group", "PUBLIC")
        destination = sap_external_system.get("destination", "")

        logger.info("Connection parameters SAP:")
        logger.info("SAP Hostname             = %s", host)
        logger.info("SAP Client               = %s", client)
        logger.info("SAP System Number        = %s", system_number)
        logger.info("SAP System ID            = %s", system_id)
        logger.info("SAP User Name            = %s", username)
        if not direct_application_server_login:
            logger.info("SAP Group Name (for RFC) = %s", group)
        if destination:
            logger.info("SAP Destination          = %s", destination)

        if direct_application_server_login:
            logger.info("SAP Login                = Direct Application Server (ashost)")
            sap_object = SAP(
                username=username,
                password=password,
                ashost=host,
                client=client,
                system_number=system_number,
                system_id=system_id,
                destination=destination,
            )
        else:
            logger.info("SAP Login                = Logon with load balancing (mshost)")
            sap_object = SAP(
                username=username,
                password=password,
                mshost=host,
                group=group,
                client=client,
                system_number=system_number,
                system_id=system_id,
                destination=destination,
            )

        return sap_object

        # end method definition

    def process_sap_rfcs(self, sap_object: SAP, section_name: str = "sapRFCs") -> bool:
        """Process SAP RFCs in payload and run them in SAP S/4HANA.

        Args:
            sap_object (SAP): SAP object
            section_name (str, optional): name of the section. It can be overridden
                                          for cases where multiple sections of same type
                                          are used (e.g. the "Post" sections)
                                          This name is also used for the "success" status
                                          files written to the Admin Personal Workspace
        Returns:
            bool: True if payload has been processed without errors, False otherwise
        """

        if not sap_object:
            logger.info("SAP object is undefined. Cannot call RFCs. Bailing out.")
            return False

        # If this payload section has been processed successfully before we
        # can return True and skip processing it once more:
        if self.check_status_file(section_name):
            return True

        success: bool = True

        for sap_rfc in self._sap_rfcs:
            rfc_name = sap_rfc["name"]

            # Check if element has been disabled in payload (enabled = false).
            # In this case we skip the element:
            if "enabled" in sap_rfc and not sap_rfc["enabled"]:
                logger.info(
                    "Payload for SAP RFC -> %s is disabled. Skipping...", rfc_name
                )
                continue

            rfc_description = (
                sap_rfc["description"] if sap_rfc.get("description") else ""
            )

            # be careful to avoid key errors as SAP RFC parameters are optional:
            rfc_params = sap_rfc["parameters"] if sap_rfc.get("parameters") else {}
            if rfc_params:
                logger.info(
                    "Calling SAP RFC -> %s (%s) with parameters -> %s ...",
                    rfc_name,
                    rfc_description,
                    rfc_params,
                )
            else:
                logger.info(
                    "Calling SAP RFC -> %s (%s) without parameters...",
                    rfc_name,
                    rfc_description,
                )

            # be careful to avoid key errors as SAP RFC parameters are optional:
            rfc_call_options = (
                sap_rfc["call_options"] if sap_rfc.get("call_options") else {}
            )
            if rfc_call_options:
                logger.debug("Using call options -> %s ...", rfc_call_options)

            result = sap_object.call(rfc_name, rfc_call_options, rfc_params)
            if result is None:
                logger.error("Failed to call SAP RFC -> %s", rfc_name)
                success = False
            elif result.get("RESULT") != "OK":
                logger.error(
                    "Result of SAP RFC -> %s is not OK, it returned -> %s failed items in result -> %s",
                    rfc_name,
                    str(result.get("FAILED")),
                    str(result),
                )
                success = False
            else:
                logger.info(
                    "Successfully called RFC -> %s. Result -> %s", rfc_name, str(result)
                )
                # Save result for status file content
                sap_rfc["result"] = result

        self.write_status_file(success, section_name, self._sap_rfcs)

        return success

        # end method definition

    def get_payload(self) -> dict:
        """Get the Payload"""
        return self._payload

    def get_users(self) -> list:
        """Get all useres"""
        return self._users

    def get_groups(self) -> list:
        """Get all groups"""
        return self._groups

    def get_workspaces(self) -> list:
        """Get all workspaces"""
        return self._workspaces

    def get_otcs_frontend(self) -> object:
        """Get OTCS Frontend oject"""
        return self._otcs_frontend

    def get_otcs_backend(self) -> object:
        """Get OTCS Backend object"""
        return self._otcs_backend

    def get_otds(self) -> object:
        """Get OTDS object"""
        return self._otds

    def get_k8s(self) -> object:
        """Get K8s object"""
        return self._k8s

    def getM365(self) -> object:
        """Get M365 object"""
        return self._m365

    def generate_password(
        self,
        length: int,
        use_special_chars: bool = False,
        min_special: int = 1,
        min_numerical: int = 1,
        min_upper: int = 1,
        min_lower: int = 1,
        override_special: str = None,
    ):
        """Function to generate random passwords with a given specification

        Args:
            length (int): Define password length
            use_special_chars (bool, optional): Define if special characters should be used. Defaults to False.
            min_special (int, optional): Define min amount of special characters. Defaults to 1.
            min_numerical (int, optional): Define if numbers should be used. Defaults to 1.
            min_upper (int, optional): Define mininum number of upper case letters. Defaults to 1.
            min_lower (int, optional): Define minimum number of lower case letters. Defaults to 1.
            override_special (string | None, optional): Define special characters to be used, if not set: !@#$%^&*()_-+=<>?/{}[]. Defaults to None.

        Raises:
            ValueError: _description_

        Returns:
            _type_: _description_
        """
        # Define character sets
        lowercase_letters = string.ascii_lowercase
        uppercase_letters = string.ascii_uppercase
        numerical_digits = string.digits
        special_characters = "!@#$%^&*()_-+=<>?/{}[]"

        if override_special:
            special_characters = override_special
        # Ensure minimum requirements are met

        if min_special + min_numerical + min_upper + min_lower > length:
            raise ValueError("Minimum requirements exceed password length")

        # Initialize the password
        password = []

        # Add required characters
        password.extend(random.sample(lowercase_letters, min_lower))
        password.extend(random.sample(uppercase_letters, min_upper))
        password.extend(random.sample(numerical_digits, min_numerical))

        if use_special_chars:
            password.extend(random.sample(special_characters, min_special))

        # Fill the rest of the password with random characters
        remaining_length = length - len(password)
        all_chars = lowercase_letters + uppercase_letters + numerical_digits

        if use_special_chars:
            all_chars += special_characters

        password.extend(random.choices(all_chars, k=remaining_length))

        # Shuffle the password to ensure randomness
        random.shuffle(password)

        # Convert the password list to a string
        final_password = "".join(password)

        return final_password
